/-
Copyright (c) 2025 Justus Springer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Justus Springer
-/
import Mathlib.Algebra.Order.Nonneg.Module
import Toric.Mathlib.Geometry.Convex.Cone.Dual

/-!
# Polyhedral cones

Given a bilinear pairing `p` between two `R`-modules `M` and `N`, we define
polyhedral cones to be pointed cones in `N` that are the dual of a finite set
in `M` (this means they are the intersection of finitely many halfspaces).

The main statement is that if both `M` and `N` are finite and the pairing is injective
in both arguments, then polyhedral cones are precisely the finitely generated cones, see
`IsPolyhedral_iff_fg`. Moreover, we obtain that the dual of a polyhedral cone is again polyhedral
(`IsPolyhedral_dual_of_IsPolyhedral`) and that the double dual of a polyhedral cone is the
cone itself (`IsPolyhedral_dual_dual`).
-/

open Function
open Submodule hiding span

variable {R 𝕜 M N : Type*}

local notation3 "𝕜≥0" => {c : 𝕜 // 0 ≤ c}

namespace PointedCone
section PartialOrder
variable [CommRing R] [PartialOrder R] [IsOrderedRing R] [AddCommGroup M] [AddCommGroup N]
  [Module R M] [Module R N] {p : M →ₗ[R] N →ₗ[R] R} {C C₁ C₂ : PointedCone R N} {s : Set M}

variable (p) in
/-- A cone is polyhedral if it is the dual of a finite set.-/
def IsPolyhedral (C : PointedCone R N) : Prop := ∃ s : Set M, s.Finite ∧ dual' p s = C

lemma IsPolyhedral_iff_exists_finset : IsPolyhedral p C ↔ ∃ s : Finset M, dual' p s = C where
  mp := fun ⟨_, ht1, ht2⟩ ↦ ⟨ht1.toFinset, ht1.coe_toFinset.symm ▸ ht2⟩
  mpr := fun ⟨s, ht⟩ ↦ ⟨s, s.finite_toSet, ht⟩

lemma IsPolyhedral.dual_of_finite (hs : s.Finite) : IsPolyhedral p (dual' p s) := ⟨s, hs, rfl⟩

lemma IsPolyhedral.dual_of_fg {C : PointedCone R M} (hC : C.FG) :
    IsPolyhedral p (dual' p (C : Set M)) := by
  obtain ⟨s, rfl⟩ := hC; exact ⟨s, s.finite_toSet, by rw [dual_span]⟩

lemma IsPolyhedral.top : IsPolyhedral p (⊤ : PointedCone R N) := ⟨∅, by simp⟩

@[simp]
lemma IsPolyhedral.dual_dual_flip (hC : IsPolyhedral p C) :
    dual' p (dual' p.flip (C : Set N)) = C := by
  obtain ⟨s, hs, rfl⟩ := hC; exact dual_dual_flip_dual _

@[simp]
lemma IsPolyhedral.dual_flip_dual {C : PointedCone R M} (hC : IsPolyhedral p.flip C) :
    dual' p.flip (dual' p (C : Set M)) = C := IsPolyhedral.dual_dual_flip hC

lemma isPolyhedral.dual_inj (hC₁ : IsPolyhedral p C₁) (hC₂ : IsPolyhedral p C₂) :
    dual' p.flip C₁ = dual' p.flip C₂ ↔ C₁ = C₂ where
  mp h := by rw [← hC₁.dual_dual_flip, ← hC₂.dual_dual_flip, h]
  mpr h := by rw [h]

end PartialOrder

section LinearOrder
variable [Field 𝕜] [LinearOrder 𝕜] [IsStrictOrderedRing 𝕜] [AddCommGroup M] [AddCommGroup N]
  [Module 𝕜 M] [Module 𝕜 N] {p : M →ₗ[𝕜] N →ₗ[𝕜] 𝕜} {C : PointedCone 𝕜 N} {s : Set M} {w : N}

/-- If the module `M` is finite and the pairing induces an injection `N` into `M →ₗ[𝕜] 𝕜`,
then the zero cone in `N` is polyhedral. -/
lemma IsPolyhedral.bot [Module.Finite 𝕜 M] (hp : Injective p.flip) :
    IsPolyhedral p (⊥ : PointedCone 𝕜 N) := by
  obtain ⟨s, hS : span 𝕜 _ = ⊤⟩ := Module.Finite.fg_top (R := 𝕜≥0) (M := M)
  refine ⟨s, s.finite_toSet, ?_⟩
  rw [← dual_span, hS, Submodule.top_coe, dual_univ hp, Submodule.zero_eq_bot]

variable (p s w) in
/-- A set whose dual cone is `span R {w} ⊔ dual p s`, see `dual_sup_span_singleton_eq_dual` -/
private noncomputable abbrev auxGenSet : Set M :=
  {x ∈ s | 0 ≤ p x w} ∪
    .image2 (fun x y ↦ p x w • y - p y w • x) {x ∈ s | 0 ≤ p x w} {y ∈ s | p y w < 0}

omit [IsStrictOrderedRing 𝕜] in
private lemma auxGenSet_finite (hs : s.Finite) :
    (auxGenSet p s w).Finite := .union (hs.sep _) <| .image2 _ (hs.sep _) (hs.sep _)

private lemma auxGenSet_subset_span :
    (auxGenSet p s w : Set M) ⊆ span 𝕜 (s : Set M) := by
  simp only [Set.union_subset_iff, Set.image2_subset_iff, Set.mem_setOf_eq, and_imp]
  refine ⟨subset_trans (fun x hx ↦ hx.1) subset_span, fun x hxS hxw y hyS hyw ↦ ?_⟩
  simpa [sub_eq_add_neg] using add_mem (smul_mem (span 𝕜 s) ⟨p x w, hxw⟩ (subset_span hyS))
    (smul_mem _ ⟨-p y w, neg_nonneg.mpr hyw.le⟩ (subset_span hxS))

private lemma span_singleton_le_dual_auxGenSet :
    span 𝕜 {w} ≤ dual' p (auxGenSet p s w) := by
  simp only [span_singleton_le_iff_mem, mem_dual', Set.mem_union, Set.mem_setOf_eq, Set.mem_image2]
  rintro z (hz | ⟨x, ⟨hxS, hxw⟩, y, ⟨hyS, hyw⟩, rfl⟩)
  · exact hz.2
  · simp only [map_sub, map_smul, LinearMap.sub_apply, LinearMap.smul_apply, smul_eq_mul,
      sub_nonneg]
    rw [mul_comm]

/-- The crucial lemma in the proof that a finitely generated cone is polyhedral:
The sum of a polyhedral cone and the cone generated by a single ray is again polyhedral. -/
private lemma dual_auxGenSet (hs : s.Finite) :
    dual' p (auxGenSet p s w) = span 𝕜 {w} ⊔ dual' p s := by
  classical
  apply ge_antisymm
  · rw [← dual_span]
    exact sup_le span_singleton_le_dual_auxGenSet <| dual_le_dual auxGenSet_subset_span
  obtain hSw | hSw := {y ∈ s | p y w < 0}.eq_empty_or_nonempty
  · simp only [Set.sep_eq_empty_iff_mem_false, not_lt] at hSw
    exact le_sup_of_le_right <| dual_le_dual fun x hx => .inl ⟨hx, hSw _ hx⟩
  rw [dual_union]
  intro v ⟨hv1, hv2⟩
  rw [Submodule.mem_sup]
  replace hv2 {x y : M} (hx : x ∈ s ∧ 0 ≤ p x w) (hy : y ∈ s ∧ p y w < 0) :
      p y w * p x v ≤ p y v * p x w := by
    simp only [SetLike.mem_coe, mem_dual', Set.mem_image2, Set.mem_setOf_eq,
      forall_exists_index, and_imp] at hv2
    specialize hv2 x hx.1 hx.2 y hy.1 hy.2 rfl
    simp only [map_sub, map_smul, LinearMap.sub_apply, LinearMap.smul_apply, smul_eq_mul,
      sub_nonneg] at hv2
    nth_rw 2 [mul_comm] at hv2
    exact hv2
  obtain hSv | ⟨y, hy⟩ := {y ∈ s | p y w < 0 ∧ p y v < 0}.eq_empty_or_nonempty
  · simp +contextual only [Set.sep_and, Set.eq_empty_iff_forall_notMem, Set.mem_inter_iff,
      Set.mem_setOf_eq, not_and, true_and, not_lt, and_imp] at hSv
    refine ⟨0, zero_mem _, v, fun x hx => ?_, zero_add _⟩
    by_cases hxw : 0 ≤ p x w
    · exact hv1 ⟨hx, hxw⟩
    · exact hSv x hx (lt_of_not_ge hxw)
  lift s to Finset M using hs
  let u : 𝕜 := ({y ∈ s | p y w < 0}.image (fun y => p y v * (p y w)⁻¹)).max' <| by
    simpa [Finset.Nonempty, Set.Nonempty] using hSw.image _
  have hu : 0 ≤ u := by
    refine le_trans (mul_nonneg_of_nonpos_of_nonpos hy.2.2.le (inv_nonpos.mpr hy.2.1.le))
      (Finset.le_max' _ (p y v * (p y w)⁻¹) ?_)
    simp only [Finset.mem_image, Finset.mem_filter]
    exact ⟨y, ⟨hy.1, hy.2.1⟩, rfl⟩
  refine ⟨u • w, ?_, v - u • w, fun z hzS ↦ ?_, add_sub_cancel _ _⟩
  · rw [← Nonneg.mk_smul _ hu]
    exact Submodule.smul_mem _ _ (Submodule.subset_span rfl)
  simp only [map_sub, map_smul, smul_eq_mul, sub_nonneg]
  obtain hzw | hzw := lt_or_ge (p z w) 0
  · rw [← _root_.mul_le_mul_right_of_neg (inv_neg''.mpr hzw), mul_inv_cancel_right₀ hzw.ne]
    exact Finset.le_max' _ (p z v * (p z w)⁻¹) <|
      Finset.mem_image.mpr ⟨z, Finset.mem_filter.mpr ⟨hzS, hzw⟩, rfl⟩
  obtain ⟨y, hy, t_eq : _ = u⟩ := Finset.mem_image.mp <|
    ({y ∈ s | p y w < 0}.image (fun y => p y v * (p y w)⁻¹)).max'_mem <| by
      simpa [Finset.Nonempty, Set.Nonempty] using hSw.image _
  rw [Finset.mem_filter] at hy
  rw [← t_eq, ← _root_.mul_le_mul_left_of_neg hy.2, ← mul_assoc]
  nth_rw 4 [mul_comm]
  rw [mul_inv_cancel_left₀ hy.2.ne]
  exact hv2 ⟨hzS, hzw⟩ hy

/-- A finitely generated cone is polyhedral. -/
lemma IsPolyhedral.of_fg [Module.Finite 𝕜 M] (hp : Injective p.flip) (hC : C.FG) :
    IsPolyhedral p C := by
  classical
  obtain ⟨s, rfl⟩ := hC
  induction s using Finset.induction with
  | empty =>
    rw [Finset.coe_empty, span_empty]
    exact .bot hp
  | @insert w A hwA hA =>
    obtain ⟨s, hs, hsA⟩ := hA
    rw [Finset.coe_insert, Submodule.span_insert, ← hsA, ← dual_auxGenSet hs]
    exact ⟨_, auxGenSet_finite hs, rfl⟩

protected lemma IsPolyhedral.span [Module.Finite 𝕜 M] (hp : Injective p.flip) {s : Set N}
    (hS : s.Finite) : IsPolyhedral p (span 𝕜 s) := .of_fg hp (fg_span hS)

/-- The double dual of a finite set equals the cone generated by that set. -/
lemma dual_dual_eq_span [Module.Finite 𝕜 M] (hp : Injective p.flip) {s : Set N}
    (hS : s.Finite) : dual' p (dual' p.flip s) = span 𝕜 s := by
  nth_rw 2 [← dual_span]
  exact IsPolyhedral.dual_dual_flip (IsPolyhedral.span hp hS)

/-- A polyhedral cone is finitely generated. -/
lemma fg_of_isPolyhedral [Module.Finite 𝕜 N] [Module.Finite 𝕜 M] (hp₁ : Injective p)
    (hp₂ : Injective p.flip) {C : PointedCone 𝕜 N} (hC : IsPolyhedral p C) : C.FG := by
  obtain ⟨s, S_fin, rfl⟩ := hC
  obtain ⟨T, T_fin, hT⟩ :=
    IsPolyhedral.of_fg (LinearMap.flip_flip p ▸ hp₁) (fg_span S_fin)
  rw [← dual_span, span, ← hT, dual_dual_eq_span hp₂ T_fin]
  exact Submodule.fg_span T_fin

alias IsPolyhedral.fg := fg_of_isPolyhedral

/-- A cone is polyhedral if and only if it is finitely generated. -/
lemma IsPolyhedral_iff_fg [Module.Finite 𝕜 N] [Module.Finite 𝕜 M] (hp₁ : Injective p)
    (hp₂ : Injective p.flip) : IsPolyhedral p C ↔ C.FG :=
  ⟨fg_of_isPolyhedral hp₁ hp₂, .of_fg hp₂⟩

/-- The dual of a polyhedral cone is again polyhedral. -/
protected lemma IsPolyhedral.dual [Module.Finite 𝕜 N] [Module.Finite 𝕜 M] (hp₁ : Injective p)
    (hp₂ : Injective p.flip) (hC : IsPolyhedral p C) : IsPolyhedral p.flip (dual' p.flip C) :=
  .dual_of_fg (fg_of_isPolyhedral hp₁ hp₂ hC)

end LinearOrder

end PointedCone

/-
Copyright (c) 2025 Justus Springer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Justus Springer
-/
import Toric.Mathlib.Geometry.Convex.Cone.Dual
import Toric.Mathlib.Algebra.Order.Nonneg.Module

/-!

# Polyhedral cones

Given a bilinear pairing `p` between two `R`-modules `M` and `N`, we define
polyhedral cones to be pointed cones in `N` that are the dual of a finite set
in `M` (this means they are the intersection of finitely many halfspaces).

The main statement is that if both `M` and `N` are finite and the pairing is injective
in both arguments, then polyhedral cones are precisely the finitely generated cones, see
`IsPolyhedral_iff_fg`. Moreover, we obtain that the dual of a polyhedral cone is again polyhedral
(`IsPolyhedral_dual_of_IsPolyhedral`) and that the double dual of a polyhedral cone is the
cone itself (`IsPolyhedral_dual_dual`).

-/


namespace PointedCone

open Submodule hiding span

section PartialOrder

variable {R M N : Type*} [CommRing R] [PartialOrder R] [IsOrderedRing R] [AddCommGroup M]
  [AddCommGroup N] [Module R M] [Module R N] {p : M →ₗ[R] N →ₗ[R] R}

variable (p) in
def IsPolyhedral (c : PointedCone R N) : Prop :=
  ∃ t : Finset M, c = dual' p t

lemma IsPolyhedral_def {c : PointedCone R N} :
    IsPolyhedral p c ↔ ∃ t, t.Finite ∧ c = dual' p t :=
  ⟨fun ⟨t, ht⟩ => ⟨t, t.finite_toSet, ht⟩,
   fun ⟨_, ht1, ht2⟩ =>⟨ht1.toFinset, ht1.coe_toFinset.symm ▸ ht2⟩⟩

lemma isPolyhedral_dual_of_finite {t : Set M} (h : t.Finite) :
    IsPolyhedral p (dual' p t) := ⟨h.toFinset, by simp⟩

lemma IsPolyhedral_dual_of_FG {c : PointedCone R M} (hc : c.FG) :
    IsPolyhedral p (dual' p (c : Set M)) := by
  obtain ⟨S, rfl⟩ := hc
  rw [dual_span]
  exact ⟨S, rfl⟩ 

theorem IsPolyhedral_top : IsPolyhedral p (⊤ : PointedCone R N) := ⟨∅, by simp⟩

@[simp]
theorem IsPolyhedral.dual_dual_flip {c : PointedCone R N} (hc : IsPolyhedral p c) :
    dual' p (dual' p.flip (c : Set N)) = c := by
  obtain ⟨t,rfl⟩ := hc
  exact dual_dual_dual_eq_dual

theorem IsPolyhedral_dual_inj {c₁ c₂ : PointedCone R N} (hc₁ : IsPolyhedral p c₁)
    (hc₂ : IsPolyhedral p c₂) : dual' p.flip c₁ = dual' p.flip c₂ ↔ c₁ = c₂ := by
  rw [← IsPolyhedral_dual_dual hc₁, ← IsPolyhedral_dual_dual hc₂, h]

end PartialOrder
section LinearOrder

variable {𝕜 M N : Type*} [Field 𝕜] [LinearOrder 𝕜] [IsStrictOrderedRing 𝕜] [AddCommGroup M]
  [AddCommGroup N] [Module 𝕜 M] [Module 𝕜 N] {p : M →ₗ[𝕜] N →ₗ[𝕜] 𝕜}

/-- If the module `M` is finite and the pairing induces an injection `N` into `M →ₗ[𝕜] 𝕜`,
then the zero cone in `N` is polyhedral. -/
theorem IsPolyhedral.bot [Module.Finite 𝕜 M] (hp : Function.Injective p.flip) :
    IsPolyhedral p (⊥ : PointedCone 𝕜 N) := by
  obtain ⟨S, hS : span 𝕜 _ = ⊤⟩ := (Nonneg.isFiniteModuleOver 𝕜 M).fg_top
  use S
  rw [← dual_span, hS, Submodule.top_coe, dual_univ hp, Submodule.zero_eq_bot]

variable (S : Finset M) (w : N)

variable (p) in
/-- A generating set for `span R {w} ⊔ dual p S`, see `dual_sup_span_singleton_eq_dual -/
private noncomputable abbrev dualSupSingletonGenSet : Finset M :=
  open Classical in
  {x ∈ S | 0 ≤ p x w} ∪
    .image₂ (fun x y => p x w • y - p y w • x) {x ∈ S | 0 ≤ p x w} {y ∈ S | p y w < 0}

private lemma dualSupSingletonGenSet_subset_span :
    (dualSupSingletonGenSet p S w : Set M) ⊆ span 𝕜 (S : Set M) := by
  simp only [Finset.coe_union, Finset.coe_filter, Finset.coe_image₂, Set.union_subset_iff,
    Set.image2_subset_iff, Set.mem_setOf_eq, SetLike.mem_coe, and_imp]
  refine ⟨subset_trans (fun x hx => hx.1) subset_span, ?_⟩
  intro x hxS hxw y hyS hyw
  convert add_mem (smul_mem (span 𝕜 S) ⟨p x w, hxw⟩ (subset_span hyS))
    (smul_mem _ ⟨-p y w, neg_nonneg.mpr hyw.le⟩ (subset_span hxS)) using 1
  rw [sub_eq_add_neg, Nonneg.mk_smul, Nonneg.mk_smul, neg_smul]

private lemma span_singleton_le_dualSupSingletonGenSet :
    span 𝕜 {w} ≤ dual' p (dualSupSingletonGenSet p S w) := by
  simp only [Finset.coe_union, Finset.coe_filter, Finset.coe_image₂, span_singleton_le_iff_mem,
    mem_dual', Set.mem_union, Set.mem_setOf_eq, Set.mem_image2]
  rintro z (hz | ⟨x, ⟨hxS, hxw⟩, y, ⟨hyS, hyw⟩, rfl⟩)
  · exact hz.2
  · simp only [map_sub, map_smul, LinearMap.sub_apply, LinearMap.smul_apply, smul_eq_mul,
      sub_nonneg]
    rw [mul_comm]

/-- The crucial lemma in the proof that a finitely generated cone is
polyhedral: The sum of a polyhedral cone and the cone generated by a
single ray is again polyhedral. -/
private lemma dual_sup_span_singleton_eq_dual :
    span 𝕜 {w} ⊔ dual' p S = dual' p (dualSupSingletonGenSet p S w) := by
  classical
  apply le_antisymm
  · rw [←dual_span]
    exact sup_le (span_singleton_le_dualSupSingletonGenSet S w)
      (dual_le_dual (dualSupSingletonGenSet_subset_span S w))
  · by_cases hSw : {y ∈ S | p y w < 0}.Nonempty
    · simp only [Finset.coe_union, Finset.coe_filter, Finset.coe_image₂]
      rw [dual_union]
      intro v ⟨hv1, hv2⟩ 
      rw [Submodule.mem_sup]
      replace hv2 {x y : M} (hx : x ∈ S ∧ 0 ≤ p x w) (hy : y ∈ S ∧ p y w < 0) :
          p y w * p x v ≤ p y v * p x w := by
        simp only [SetLike.mem_coe, mem_dual', Set.mem_image2, Set.mem_setOf_eq,
          forall_exists_index, and_imp] at hv2
        specialize hv2 x hx.1 hx.2 y hy.1 hy.2 rfl
        simp only [map_sub, map_smul, LinearMap.sub_apply, LinearMap.smul_apply, smul_eq_mul,
          sub_nonneg] at hv2
        nth_rw 2 [mul_comm] at hv2
        exact hv2
      by_cases hSv : {y ∈ S | p y w < 0 ∧ p y v < 0}.Nonempty
      · let t : 𝕜 := ({y ∈ S | p y w < 0}.image (fun y => p y v * (p y w)⁻¹)).max' <|
          Finset.image_nonempty.mpr hSw
        have ht : 0 ≤ t := by
          obtain ⟨y, hy⟩ := hSv
          rw [Finset.mem_filter] at hy
          refine le_trans (mul_nonneg_of_nonpos_of_nonpos hy.2.2.le (inv_nonpos.mpr hy.2.1.le))
            (Finset.le_max' _ (p y v * (p y w)⁻¹) ?_)
          simp only [Finset.mem_image, Finset.mem_filter]
          exact ⟨y, ⟨⟨hy.1, hy.2.1⟩, rfl⟩⟩
        refine ⟨t • w, ?_, v - t • w, ?_, add_sub_cancel _ _⟩
        · rw [←Nonneg.mk_smul t ht]
          exact Submodule.smul_mem _ _ (Submodule.subset_span rfl)
        · intro z hzS
          simp only [map_sub, map_smul, smul_eq_mul, sub_nonneg]
          by_cases hzw_zero : p z w = 0
          · rw [hzw_zero, mul_zero]
            exact hv1 ⟨hzS, hzw_zero.symm.le⟩
          · by_cases hzw : 0 < p z w
            · obtain ⟨y, hy, t_eq : _ = t⟩ := Finset.mem_image.mp <|
                ({y ∈ S | p y w < 0}.image (fun y => p y v * (p y w)⁻¹)).max'_mem <|
                Finset.image_nonempty.mpr hSw
              rw [Finset.mem_filter] at hy
              rw [← t_eq, ← _root_.mul_le_mul_left_of_neg hy.2, ← mul_assoc]
              nth_rw 4 [mul_comm]
              rw [mul_inv_cancel_left₀ hy.2.ne]
              exact hv2 ⟨hzS, hzw.le⟩ hy
            · replace hzw : p z w < 0 := lt_of_le_of_ne (le_of_not_lt hzw) hzw_zero
              rw [← _root_.mul_le_mul_right_of_neg (inv_neg''.mpr hzw),
                mul_inv_cancel_right₀ hzw_zero]
              exact Finset.le_max' _ ((p z) v * ((p z) w)⁻¹) <|
                Finset.mem_image.mpr ⟨z, Finset.mem_filter.mpr ⟨hzS, hzw⟩, rfl⟩
      · simp only [Finset.not_nonempty_iff_eq_empty, Finset.eq_empty_iff_forall_not_mem,
          Finset.mem_filter, not_and, not_lt] at hSv
        refine ⟨0, zero_mem _, v, fun x hx => ?_, zero_add _⟩
        by_cases hxw : 0 ≤ p x w
        · exact hv1 ⟨hx, hxw⟩
        · exact hSv x hx (lt_of_not_ge hxw)
    · simp only [Finset.not_nonempty_iff_eq_empty, Finset.eq_empty_iff_forall_not_mem, 
        Finset.mem_filter, not_and, not_lt] at hSw
      exact le_sup_of_le_right <| dual_le_dual fun x hx =>
        Finset.mem_union_left _ (Finset.mem_filter.mpr ⟨hx, hSw x hx⟩)

/-- A finitely generated cone is polyhedral. -/
theorem IsPolyhedral_of_fg [Module.Finite 𝕜 M] (hp : Function.Injective p.flip)
    {c : PointedCone 𝕜 N} (hc : c.FG) : IsPolyhedral p c := by
  classical
  obtain ⟨S, rfl⟩ := hc
  induction S using Finset.induction with
  | empty =>
    rw [Finset.coe_empty, span_empty]
    exact IsPolyhedral_bot hp
  | @insert w A hwA hA =>
    obtain ⟨S, hS⟩ := hA
    rw [Finset.coe_insert, Submodule.span_insert, hS, dual_sup_span_singleton_eq_dual]
    exact ⟨dualSupSingletonGenSet p S w, rfl⟩

lemma IsPolyhedral_span [Module.Finite 𝕜 M] (hp : Function.Injective p.flip) {S : Set N}
    (hS : S.Finite) : IsPolyhedral p (span 𝕜 S) :=
  IsPolyhedral_of_fg hp (fg_span hS)

/-- The double dual of a finite set equals the cone generated by that set. -/
lemma dual_dual_eq_span [Module.Finite 𝕜 M] (hp : Function.Injective p.flip) {S : Set N}
    (hS : S.Finite) : dual' p (dual' p.flip S) = span 𝕜 S := by
  nth_rw 2 [←dual_span]
  exact IsPolyhedral_dual_dual (IsPolyhedral_span hp hS)

/-- A polyhedral cone is finitely generated. -/
theorem fg_of_IsPolyhedral [Module.Finite 𝕜 N] [Module.Finite 𝕜 M] (hp1 : Function.Injective p)
    (hp2 : Function.Injective p.flip) {c : PointedCone 𝕜 N} (hc : IsPolyhedral p c) : c.FG := by
  rw [IsPolyhedral_def] at hc
  obtain ⟨S, S_fin, rfl⟩ := hc
  obtain ⟨T, T_fin, hT : span 𝕜 S = _⟩ := IsPolyhedral_def.mp <|
    IsPolyhedral_of_fg (LinearMap.flip_flip p ▸ hp1) (fg_span S_fin)
  rw [←dual_span, hT, dual_dual_eq_span hp2 T_fin]
  exact Submodule.fg_span T_fin

/-- A cone is polyhedral if and only if it is finitely generated. -/
theorem IsPolyhedral_iff_fg [Module.Finite 𝕜 N] [Module.Finite 𝕜 M] (hp1 : Function.Injective p)
    (hp2 : Function.Injective p.flip) {c : PointedCone 𝕜 N} :
    IsPolyhedral p c ↔ c.FG :=
  ⟨fg_of_IsPolyhedral hp1 hp2, IsPolyhedral_of_fg hp2⟩

/-- The dual of a polyhedral cone is again polyhedral. -/
protected theorem IsPolyhedral.dual [Module.Finite 𝕜 N] [Module.Finite 𝕜 M]
    (hp1 : Function.Injective p) (hp2 : Function.Injective p.flip) {c : PointedCone 𝕜 N}
    (hc : IsPolyhedral p c) : IsPolyhedral p.flip (dual' p.flip c) :=
  IsPolyhedral_dual_of_FG (fg_of_IsPolyhedral hp1 hp2 hc)

end LinearOrder

end PointedCone

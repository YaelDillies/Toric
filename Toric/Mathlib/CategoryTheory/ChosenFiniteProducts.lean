import Mathlib.CategoryTheory.ChosenFiniteProducts
import Mathlib.CategoryTheory.Limits.FullSubcategory
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Terminal

namespace CategoryTheory

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

open Limits ChosenFiniteProducts

namespace Functor

open LaxMonoidal Monoidal

variable {C : Type u} [Category.{v} C] [ChosenFiniteProducts C]
  {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] [ChosenFiniteProducts D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [ChosenFiniteProducts E]
  (F : C ‚•§ D) [PreservesFiniteProducts F]
  (G : D ‚•§ E) [PreservesFiniteProducts G]

attribute [local instance] monoidalOfChosenFiniteProducts

attribute [instance] NatTrans.monoidal_of_preservesFiniteProducts

lemma Œµ_of_chosenFiniteProducts : Œµ F = (preservesTerminalIso F).inv := by
  change (ŒµIso F).symm.inv = _; congr; ext; simp; rfl

lemma Œº_of_chosenFiniteProducts (X Y : C) : Œº F X Y = (prodComparisonIso F X Y).inv := by
  change (ŒºIso F X Y).symm.inv = _; congr; ext : 1; rfl

@[simp]
lemma preservesTerminalIso_id : preservesTerminalIso (ùü≠ C) = .refl _ := by
  ext; exact toUnit_unique ..

@[simp]
lemma preservesTerminalIso_comp :
    preservesTerminalIso (F ‚ãô G) =
      G.mapIso (preservesTerminalIso F) ‚â™‚â´ preservesTerminalIso G := by
  ext; exact toUnit_unique ..

@[simp]
lemma prodComparisonIso_id (X Y : C) : prodComparisonIso (ùü≠ C) X Y = .refl _ := by
  ext <;> simp

@[simp]
lemma prodComparisonIso_comp (X Y : C) :
    prodComparisonIso (F ‚ãô G) X Y =
      G.mapIso (prodComparisonIso F X Y) ‚â™‚â´ prodComparisonIso G (F.obj X) (F.obj Y) := by
  ext <;> simp [ChosenFiniteProducts.prodComparison, ‚Üê G.map_comp]

-- TODO: Rename
alias map_toUnit_comp_terminalComparison := map_toUnit_comp_terminalCompariso

end CategoryTheory.Functor

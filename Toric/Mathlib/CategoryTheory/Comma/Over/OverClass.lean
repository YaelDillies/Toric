import Mathlib.CategoryTheory.Comma.Over.OverClass

namespace CategoryTheory.OverClass
variable {C : Type*} [Category C] {X Y Z S : C} [OverClass X S] [OverClass Y S] [OverClass Z S]

instance (f : X ‚ü∂ Y) [IsIso f] [HomIsOver f S] : IsIso (asOverHom S f) :=
  have : IsIso ((Over.forget S).map (asOverHom S f)) := ‚Äπ_‚Ä∫
  isIso_of_reflects_iso _ (Over.forget _)

instance {f : X ‚ü∂ Y} [IsIso f] [HomIsOver f S] : HomIsOver (asIso f).hom S := ‚Äπ_‚Ä∫
instance {f : X ‚ü∂ Y} [IsIso f] [HomIsOver f S] : HomIsOver (asIso f).inv S where
instance {f : X ‚ü∂ Y} [IsIso f] [HomIsOver f S] : HomIsOver (inv f) S where

@[simp] lemma asOverHom_id : asOverHom S (ùüô X) = ùüô (asOver X S) := rfl

@[simp] lemma asOverHom_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [HomIsOver f S] [HomIsOver g S] :
    asOverHom S (f ‚â´ g) = asOverHom S f ‚â´ asOverHom S g := rfl

@[simp] lemma asOverHom_inv (f : X ‚ü∂ Y) [IsIso f] [HomIsOver f S] :
    asOverHom S (inv f) = inv (asOverHom S f) := by simp [‚Üê hom_comp_eq_id, ‚Üê asOverHom_comp]

end CategoryTheory.OverClass

import Mathlib.CategoryTheory.Monoidal.Comon_
import Toric.Mathlib.CategoryTheory.Monoidal.Mon_
import Toric.Mathlib.CategoryTheory.Monoidal.NaturalTransformation
import Toric.Mathlib.CategoryTheory.Monoidal.Opposite

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory C]

open Functor LaxMonoidal OplaxMonoidal

@[simps!]
def monOpEquivComonOp : Mon_ C·µí·µñ ‚âå (Comon_ C)·µí·µñ := (Comon_.Comon_EquivMon_OpOp C).symm.rightOp

@[simps!]
noncomputable def comonOpEquivMonOp : Comon_ C·µí·µñ ‚âå (Mon_ C)·µí·µñ :=
  (Comon_.Comon_EquivMon_OpOp C·µí·µñ).trans <| .op (opOpEquivalence C).mapMon

section BraidedCategory
variable [BraidedCategory C]

instance : (monOpEquivComonOp C).functor.OplaxMonoidal := sorry
instance : (monOpEquivComonOp C).inverse.OplaxMonoidal := sorry

end BraidedCategory

namespace CategoryTheory
variable {C}
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E]
  {F F' : C ‚•§ D} {G : D ‚•§ E}

namespace Functor
section OplaxMonoidal
variable [F.OplaxMonoidal] [F'.OplaxMonoidal] [G.OplaxMonoidal] (X Y : C) [Mon_Class X]
  [Mon_Class Y] (f : X ‚ü∂ Y) [IsMon_Hom f]

/-- The identity functor is also the identity on comonoid objects. -/
@[simps!]
noncomputable def mapComonIdIso : mapComon (ùü≠ C) ‚âÖ ùü≠ (Comon_ C) :=
  NatIso.ofComponents fun X ‚Ü¶ Comon_.mkIso (.refl _)

/-- The composition functor is also the composition on comonoid objects. -/
@[simps!]
noncomputable def mapComonCompIso : (F ‚ãô G).mapComon ‚âÖ F.mapComon ‚ãô G.mapComon :=
  NatIso.ofComponents fun X ‚Ü¶ Comon_.mkIso (.refl _)

protected instance Faithful.mapComon [F.Faithful] : F.mapComon.Faithful where
  map_injective {_X _Y} _f _g hfg := Comon_.Hom.ext <| map_injective congr(($hfg).hom)

-- /-- Natural transformations between functors lift to monoid objects. -/
-- @[simps!]
-- noncomputable def mapComonNatTrans (f : F ‚ü∂ F') [NatTrans.IsOplaxMonoidal f] :
--     F.mapComon ‚ü∂ F'.mapComon where
--   app X := .mk (f.app _)

-- /-- Natural isomorphisms between functors lift to monoid objects. -/
-- @[simps!]
-- noncomputable def mapComonNatIso (e : F ‚âÖ F') [NatTrans.IsOplaxMonoidal e.hom] :
--     F.mapComon ‚âÖ F'.mapComon :=
--   NatIso.ofComponents fun X ‚Ü¶ Comon_.mkIso (e.app _)

end OplaxMonoidal

section Monoidal
variable [F.Monoidal]

-- attribute [local instance] obj.instComon_Class

-- protected instance Full.mapComon [F.Full] [F.Faithful] : F.mapComon.Full where
--   map_surjective {X Y} f :=
--     let ‚ü®g, hg‚ü© := F.map_surjective f.hom
--     ‚ü®{
--       hom := g
--       one_hom := F.map_injective <| by simpa [‚Üê hg, cancel_epi] using f.one_hom
--       mul_hom := F.map_injective <| by simpa [‚Üê hg, cancel_epi] using f.mul_hom
--     }, Comon_.Hom.ext hg‚ü©

-- instance FullyFaithful.isComon_Hom_preimage (hF : F.FullyFaithful) {X Y : C}
--     [Comon_Class X] [Comon_Class Y] (f : F.obj X ‚ü∂ F.obj Y) [IsComon_Hom f] :
--     IsComon_Hom (hF.preimage f) where
--   one_hom := hF.map_injective <| by simp [‚Üê obj.Œ∑_def_assoc, ‚Üê obj.Œ∑_def, ‚Üê cancel_epi (Œµ F)]
--   mul_hom := hF.map_injective <| by
--     simp [‚Üê obj.Œº_def_assoc, ‚Üê obj.Œº_def, ‚Üê Œº_natural_assoc, ‚Üê cancel_epi (LaxMonoidal.Œº F ..)]

-- /-- If `F : C ‚•§ D` is a fully faithful monoidal functor, then `Mon(F) : Mon C ‚•§ Mon D` is fully
-- faithful too. -/
-- protected def FullyFaithful.mapComon (hF : F.FullyFaithful) : F.mapComon.FullyFaithful where
--   preimage {X Y} f := .mk' <| hF.preimage f.hom

end Monoidal

-- variable (C D) in
-- /-- `mapComon` is functorial in the lax monoidal functor. -/
-- @[simps] -- Porting note: added this, not sure how it worked previously without.
-- def mapComonFunctor : LaxMonoidalFunctor C D ‚•§ Comon_ C ‚•§ Comon_ D where
--   obj F := F.mapComon
--   map Œ± := { app := fun A => { hom := Œ±.hom.app A.X } }
--   map_comp _ _ := rfl

end Functor

open Functor

-- namespace Adjunction
-- variable {F : C ‚•§ D} {G : D ‚•§ C} (a : F ‚ä£ G) [F.Monoidal] [G.OplaxMonoidal] [a.IsOplaxMonoidal]

-- /-- An adjunction of monoidal functors lifts to an adjunction of their lifts to monoid objects.
-- -/
-- @[simps] noncomputable def mapComon : F.mapComon ‚ä£ G.mapComon where
--   unit := mapComonIdIso.inv ‚â´ mapComonNatTrans a.unit ‚â´ mapComonCompIso.hom
--   counit := mapComonCompIso.inv ‚â´ mapComonNatTrans a.counit ‚â´ mapComonIdIso.hom

-- end Adjunction

-- namespace Equivalence

-- /-- An equivalence of categories lifts to an equivalence of their monoid objects. -/
-- @[simps]
-- noncomputable def mapComon (e : C ‚âå D) [e.functor.Monoidal] [e.inverse.Monoidal] [e.IsMonoidal] :
--     Comon_ C ‚âå Comon_ D where
--   functor := e.functor.mapComon
--   inverse := e.inverse.mapComon
--   unitIso := mapComonIdIso.symm ‚â™‚â´ mapComonNatIso e.unitIso ‚â™‚â´ mapComonCompIso
--   counitIso := mapComonCompIso.symm ‚â™‚â´ mapComonNatIso e.counitIso ‚â™‚â´ mapComonIdIso

-- end CategoryTheory.Equivalence
end CategoryTheory

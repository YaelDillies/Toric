/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.Algebra.Category.Grp.Limits
import Mathlib.CategoryTheory.Monoidal.Grp_
import Toric.Mathlib.CategoryTheory.Monoidal.Mon_

/-!
# Yoneda embedding of `Grp_ C`

We show that group objects are exactly those whose yoneda presheaf is a presheaf of groups,
by constructing the yoneda embedding `Grp_ C ‚•§ C·µí·µñ ‚•§ GrpCat.{v}` and
showing that it is fully faithful and its (essential) image is the representable functors.

-/

open CategoryTheory Mon_Class MonoidalCategory ChosenFiniteProducts Opposite

section Yoneda

universe w v u

variable {C : Type*} [Category.{v} C] [ChosenFiniteProducts C]
variable (X : C)

/-- If `X` represents a presheaf of groups, then `X` is a group object. -/
def Grp_Class.ofRepresentableBy (F : C·µí·µñ ‚•§ Grp.{w}) (Œ± : (F ‚ãô forget _).RepresentableBy X) :
    Grp_Class X where
  __ := Mon_Class.ofRepresentableBy X (F ‚ãô (forget‚ÇÇ Grp MonCat)) Œ±
  inv := Œ±.homEquiv.symm (Œ±.homEquiv (ùüô _))‚Åª¬π
  left_inv' := by
    change lift (Œ±.homEquiv.symm (Œ±.homEquiv (ùüô X))‚Åª¬π) (ùüô X) ‚â´
      Œ±.homEquiv.symm (Œ±.homEquiv (fst X X) * Œ±.homEquiv (snd X X)) =
        toUnit X ‚â´ Œ±.homEquiv.symm 1
    apply Œ±.homEquiv.injective
    simp only [Œ±.homEquiv_comp, Equiv.apply_symm_apply]
    simp only [Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_one, map_mul]
    simp only [‚Üê ConcreteCategory.forget_map_eq_coe, ‚Üê Functor.comp_map, ‚Üê Œ±.homEquiv_comp]
    simp [‚Üê Functor.comp_obj]
  right_inv' := by
    change lift (ùüô X) (Œ±.homEquiv.symm (Œ±.homEquiv (ùüô X))‚Åª¬π) ‚â´
      Œ±.homEquiv.symm (Œ±.homEquiv (fst X X) * Œ±.homEquiv (snd X X)) =
        toUnit X ‚â´ Œ±.homEquiv.symm 1
    apply Œ±.homEquiv.injective
    simp only [Œ±.homEquiv_comp, Equiv.apply_symm_apply]
    simp only [Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_one, map_mul]
    simp only [‚Üê ConcreteCategory.forget_map_eq_coe, ‚Üê Functor.comp_map, ‚Üê Œ±.homEquiv_comp]
    simp [‚Üê Functor.comp_obj]

attribute [local instance] monoidOfMon_Class

instance Grp_Class.instInv [Grp_Class X] (Y : C) : Inv (Y ‚ü∂ X) where
  inv := (¬∑ ‚â´ Œπ)

/-- If `X` is a group object, then `Hom(Y, X)` has a group structure. -/
@[reducible] def groupOfGrp_Class [Grp_Class X] (Y : C) : Group (Y ‚ü∂ X) where
  __ := monoidOfMon_Class X Y
  div_eq_mul_inv _ _ := rfl
  zpow := zpowRec
  inv_mul_cancel f := by
    change lift (f ‚â´ Œπ) _ ‚â´ Œº = toUnit Y ‚â´ Œ∑
    rw [‚Üê comp_toUnit f, Category.assoc, ‚Üê Grp_Class.left_inv _, comp_lift_assoc, Category.comp_id]

attribute [local instance] groupOfGrp_Class

/- If `X` is a group object, then `Hom(-, X)` is a presheaf of groups. -/
@[simps]
def yonedaGrpObj [Grp_Class X] : C·µí·µñ ‚•§ Grp.{v} where
  obj Y := .of (unop Y ‚ü∂ X)
  map œÜ := Grp.ofHom ((yonedaMonObj X).map œÜ).hom

/-- If `X` is a group object, then `Hom(-, X)` as a presheaf of group is represented by `X`. -/
def yonedaGrpObjRepresentableBy [Grp_Class X] : (yonedaGrpObj X ‚ãô forget _).RepresentableBy X :=
  Functor.representableByEquiv.symm (Iso.refl _)

lemma Grp_ClassOfRepresentableBy_yonedaGrpObjRepresentableBy [Grp_Class X] :
    Grp_Class.ofRepresentableBy X _ (yonedaGrpObjRepresentableBy X) = ‚Äπ_‚Ä∫ := by
  ext
  show lift (fst X X) (snd X X) ‚â´ Œº = Œº
  rw [lift_fst_snd, Category.id_comp]

/-- If `X` represents a presheaf of groups `F`, then `Hom(-, X)` is isomorphic to `F` as
a presheaf of groups. -/
@[simps!]
def yonedaGrpObjGrp_ClassOfRepresentableBy
    (F : C·µí·µñ ‚•§ Grp.{v}) (Œ± : (F ‚ãô forget _).RepresentableBy X) :
    letI := Grp_Class.ofRepresentableBy X F Œ±
    yonedaGrpObj X ‚âÖ F :=
  letI := Grp_Class.ofRepresentableBy X F Œ±
  NatIso.ofComponents (fun Y ‚Ü¶ MulEquiv.toGrpIso
    { toEquiv := Œ±.homEquiv
      map_mul' :=
  ((yonedaMonObjMon_Class.ofRepresentableBy X (F ‚ãô forget‚ÇÇ Grp MonCat) Œ±).hom.app Y).hom.map_mul})
      (fun œÜ ‚Ü¶ Grp.hom_ext (MonoidHom.ext (Œ±.homEquiv_comp œÜ.unop)))

/-- The yoneda embedding of `Grp_C` into presheaves of groups. -/
@[simps]
def yonedaGrp : Grp_ C ‚•§ C·µí·µñ ‚•§ Grp.{v} where
  obj X := yonedaGrpObj X.X
  map {X‚ÇÅ X‚ÇÇ} œà :=
  { app Y := Grp.ofHom ((yonedaMon.map œà).app Y).hom }

@[reassoc]
lemma yonedaGrp_naturality {X‚ÇÅ X‚ÇÇ : C} [Grp_Class X‚ÇÅ] [Grp_Class X‚ÇÇ]
    (Œ± : yonedaGrpObj X‚ÇÅ ‚ü∂ yonedaGrpObj X‚ÇÇ) {Y‚ÇÅ Y‚ÇÇ : C} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ X‚ÇÅ) :
      Œ±.app _ (f ‚â´ g) = f ‚â´ Œ±.app _ g := congr($(Œ±.naturality f.op) g)

/-- The yoneda embedding for `Grp_C` is fully faithful. -/
noncomputable def yonedaGrpFullyFaithful : yonedaGrp (C := C).FullyFaithful where
  preimage {X‚ÇÅ X‚ÇÇ} Œ± := yonedaMon.preimage (whiskerRight Œ± (forget‚ÇÇ Grp MonCat))
  map_preimage {X‚ÇÅ X‚ÇÇ} Œ± := by
    ext X:3
    exact congr(($(yonedaMon.map_preimage (whiskerRight Œ± (forget‚ÇÇ Grp MonCat))).app X).hom)
  preimage_map := yonedaMon.preimage_map

instance : yonedaGrp (C := C).Full := yonedaGrpFullyFaithful.full
instance : yonedaGrp (C := C).Faithful := yonedaGrpFullyFaithful.faithful

lemma essImage_yonedaGrp :
    yonedaGrp (C := C).essImage = (¬∑ ‚ãô forget _) ‚Åª¬π' setOf Functor.IsRepresentable := by
  ext F
  constructor
  ¬∑ rintro ‚ü®X, ‚ü®Œ±‚ü©‚ü©
    exact ‚ü®X.X, ‚ü®Functor.representableByEquiv.symm (isoWhiskerRight Œ± (forget _))‚ü©‚ü©
  ¬∑ rintro ‚ü®X, ‚ü®e‚ü©‚ü©
    letI := Grp_Class.ofRepresentableBy X F e
    exact ‚ü®Grp_.mk' X, ‚ü®yonedaGrpObjGrp_ClassOfRepresentableBy X F e‚ü©‚ü©

variable {X} {G : C} [Grp_Class G]

-- TODO (Micha≈Ç): doc string
def yonedaGrpObjRepresentableByOverMkSnd :
    ((Over.forget X).op ‚ãô yonedaGrpObj G ‚ãô forget Grp).RepresentableBy (.mk (snd G X)) where
  homEquiv {Y} := show (Y ‚ü∂ Over.mk (snd G X)) ‚âÉ (Y.left ‚ü∂ G) from {
      toFun f := f.left ‚â´ fst _ _
      invFun f := Over.homMk (lift f Y.hom)
      left_inv f := by ext; simp; ext <;> simp; simpa using f.w.symm
      right_inv f := by simp
    }
  homEquiv_comp {Y Z} f g := by dsimp; erw [Equiv.coe_fn_mk, Equiv.coe_fn_mk]; simp

variable [Limits.HasPullbacks C]

attribute [local instance] Over.chosenFiniteProducts

noncomputable instance : Grp_Class <| Over.mk <| snd G X :=
  .ofRepresentableBy _ ((Over.forget _).op ‚ãô yonedaGrpObj G) yonedaGrpObjRepresentableByOverMkSnd

end Yoneda

section

open ChosenFiniteProducts MonoidalCategory

variable {C : Type*} [Category C] [ChosenFiniteProducts C] {G H : Grp_ C}

attribute [local instance] groupOfGrp_Class

def Grp_.homMk {G H : C} [Grp_Class G] [Grp_Class H] (f : G ‚ü∂ H) [IsMon_Hom f] :
    Grp_.mk' G ‚ü∂ Grp_.mk' H := ‚ü®f, IsMon_Hom.one_hom, IsMon_Hom.mul_hom‚ü©

@[reassoc]
lemma Grp_Class.comp_inv {G H K : C} (f : G ‚ü∂ H) (h : K ‚ü∂ G) [Grp_Class H] :
    h ‚â´ f‚Åª¬π = (h ‚â´ f)‚Åª¬π := ((yonedaGrp.obj (.mk' H)).map (h.op)).hom.map_inv f

@[reassoc]
lemma Grp_Class.comp_div {G H K : C} (f g : G ‚ü∂ H) (h : K ‚ü∂ G) [Grp_Class H] :
    h ‚â´ (f / g) = h ‚â´ f / h ‚â´ g :=
  (((yonedaGrp.obj (.mk' H)).map (h.op)).hom.map_div f g)

@[reassoc]
lemma Grp_Class.div_comp {G H K : C} (f g : G ‚ü∂ H) (h : H ‚ü∂ K) [Grp_Class H] [Grp_Class K]
    [IsMon_Hom h] : (f / g) ‚â´ h =  (f ‚â´ h) / (g ‚â´ h) :=
    (((yonedaGrp.map (Grp_.homMk h)).app (.op G)).hom.map_div f g)

lemma Grp_Class.inv_eq_comp_inv {G H : C} (f : G ‚ü∂ H) [Grp_Class H] : f ‚â´ Œπ = f‚Åª¬π := rfl

lemma Grp_Class.mul_eq_comp_mul {G H : C} {f g : G ‚ü∂ H} [Grp_Class H] : f * g = lift f g ‚â´ Œº := rfl

lemma Grp_Class.mul_inv_rev {G : C} [Grp_Class G] :
    Œº ‚â´ Œπ = ((Œπ : G ‚ü∂ G) ‚äó Œπ) ‚â´ (Œ≤_ _ _).hom ‚â´ Œº := by
  calc
    _ = ((fst G G) * (snd G G)) ‚â´ Œπ := by rw [mul_eq_mul]
    _ = (snd G G)‚Åª¬π * (fst G G)‚Åª¬π := by rw [Grp_Class.inv_eq_comp_inv]; simp
    _ = lift (snd G G ‚â´ Œπ) (fst G G ‚â´ Œπ) ‚â´ Œº := rfl
    _ = lift (fst G G ‚â´ Œπ) (snd G G ‚â´ Œπ) ‚â´ (Œ≤_ G G).hom ‚â´ Œº := by simp
    _ = ((Œπ : G ‚ü∂ G) ‚äó Œπ) ‚â´ (Œ≤_ _ _).hom ‚â´ Œº := by simp

instance Hom.instCommGroup {G H : C} [Grp_Class H] [IsCommMon H] :
    CommGroup (G ‚ü∂ H) where
  __ := Hom.instCommMonoid
  inv_mul_cancel f := by simp

@[reassoc]
lemma Grp_Class.comp_zpow {G H K : C} [Grp_Class H] (f : G ‚ü∂ H) (h : K ‚ü∂ G) :
    ‚àÄ n : ‚Ñ§, h ‚â´ f ^ n = (h ‚â´ f) ^ n
  | (n : ‚Ñï) => by simp [comp_pow]
  | .negSucc n => by simp [comp_pow, comp_inv]

namespace Grp_.Hom

instance instOne : One (G ‚ü∂ H) := inferInstanceAs <| One (G.toMon_ ‚ü∂ H.toMon_)

lemma hom_one : (1 : (G ‚ü∂ H)).hom = 1 := rfl

variable [IsCommMon H.X]

instance instMul : Mul (G ‚ü∂ H) := inferInstanceAs <| Mul (G.toMon_ ‚ü∂ H.toMon_)

@[simp]
lemma hom_mul (f g : G ‚ü∂ H) : (f * g).hom = f.hom * g.hom := rfl

instance instPow : Pow (G ‚ü∂ H) ‚Ñï := inferInstanceAs <| Pow (G.toMon_ ‚ü∂ H.toMon_) ‚Ñï

@[simp]
lemma hom_pow (f : G ‚ü∂ H) (n : ‚Ñï) : (f ^ n).hom = f.hom ^ n := rfl

instance {G : C} [Grp_Class G] [IsCommMon G] : IsMon_Hom (Œπ : G ‚ü∂ G) where
  one_hom := by simp only [one_eq_one]; exact inv_one
  mul_hom := by
    simp [Grp_Class.mul_inv_rev]

instance {f : G ‚ü∂ H} [IsCommMon H.X] : IsMon_Hom f.hom‚Åª¬π where
  one_hom := by
    change _ ‚â´ _ ‚â´ _ = _
    simp [Mon_Class.one_eq_one, one_comp]
  mul_hom := by
    simp [‚Üê Grp_Class.inv_eq_comp_inv]

instance instInv : Inv (G ‚ü∂ H) where
  inv f := {
    hom := f.hom‚Åª¬π
    one_hom := by simp only [Mon_.one_eq_one, one_comp_assoc]; rw [one_comp]
    mul_hom := by simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp]
  }

@[simp]
lemma hom_inv (f : G ‚ü∂ H) : (f‚Åª¬π).hom = f.hom‚Åª¬π := rfl

instance instDiv : Div (G ‚ü∂ H) where
  div f g :=
  { hom := f.hom / g.hom
    one_hom := by simp [Mon_.one_eq_one, Grp_Class.comp_div, Mon_Class.one_comp]
    mul_hom := by
      simp [Mon_.mul_eq_mul, Grp_Class.comp_div, Mon_Class.comp_mul, Mon_Class.mul_comp,
          mul_div_mul_comm] }

@[simp]
lemma hom_div (f g : G ‚ü∂ H) : (f / g).hom = f.hom / g.hom := rfl

instance instPowInt : Pow (G ‚ü∂ H) ‚Ñ§ where
  pow f i := {
    hom := f.hom ^ i
    one_hom := by simp [Mon_.one_eq_one, Mon_Class.one_comp, Grp_Class.comp_zpow]
    mul_hom := by
      simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp, Grp_Class.comp_zpow, mul_zpow]
  }

@[simp]
lemma hom_zpow (f : G ‚ü∂ H) (n : ‚Ñ§) : (f ^ n).hom = f.hom ^ n := rfl

instance instCommGroup : CommGroup (G ‚ü∂ H) :=
  Function.Injective.commGroup Mon_.Hom.hom (fun _ _ ‚Ü¶ Mon_.Hom.ext)
    hom_one hom_mul hom_inv hom_div hom_pow hom_zpow

end Grp_.Hom

section

variable {C : Type*} [Category C] [ChosenFiniteProducts C] {G : C}

instance [Grp_Class G] [IsCommMon G] : IsCommMon (Grp_.mk' G).X := ‚Äπ_‚Ä∫

end

end

open Limits

namespace CategoryTheory.Functor
universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [ChosenFiniteProducts.{v‚ÇÅ} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [ChosenFiniteProducts.{v‚ÇÇ} D]
variable (F : C ‚•§ D) [PreservesFiniteProducts F]

attribute [local instance] monoidalOfChosenFiniteProducts

protected instance Faithful.mapGrp [F.Faithful] : F.mapGrp.Faithful where
  map_injective {_X _Y} _f _g hfg := F.mapMon.map_injective hfg

protected instance Full.mapGrp [F.Full] [F.Faithful] : F.mapGrp.Full where
  map_surjective := F.mapMon.map_surjective

end CategoryTheory.Functor

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory.Equivalence
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [ChosenFiniteProducts C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [ChosenFiniteProducts D]

noncomputable def mapGrp (e : C ‚âå D) [e.functor.LaxMonoidal] [e.inverse.LaxMonoidal] :
    Grp_ C ‚âå Grp_ D where
  functor := e.functor.mapGrp
  inverse := e.inverse.mapGrp
  unitIso := sorry
  counitIso := sorry
  functor_unitIso_comp := sorry

end CategoryTheory.Equivalence

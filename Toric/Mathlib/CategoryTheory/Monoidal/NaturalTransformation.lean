/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Adjunction.FullyFaithful
import Mathlib.CategoryTheory.Monoidal.Functor
import Mathlib.CategoryTheory.ObjectProperty.FullSubcategory

/-!
# Monoidal natural transformations

Natural transformations between (Oplax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œ¥ X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œ¥ X Y`.

-/

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C]
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E]
  {E' : Type u‚ÇÑ} [Category.{v‚ÇÑ} E'] [MonoidalCategory E']

variable {F F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ D} {G G‚ÇÅ G‚ÇÇ : D ‚•§ E} {H H‚ÇÅ H‚ÇÇ : E ‚•§ E'}
  [F.OplaxMonoidal] [F‚ÇÅ.OplaxMonoidal] [F‚ÇÇ.OplaxMonoidal] [F‚ÇÉ.OplaxMonoidal]
  [G.OplaxMonoidal] [G‚ÇÅ.OplaxMonoidal] [G‚ÇÇ.OplaxMonoidal]
  [H.OplaxMonoidal] [H‚ÇÅ.OplaxMonoidal] [H‚ÇÇ.OplaxMonoidal] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ)

namespace NatTrans

open Functor.OplaxMonoidal

/-- A natural transformation between oplax monoidal functors is monoidal if it satisfies
`Œ∑ F ‚â´ œÑ.app (ùüô_ C) = Œ∑ G` and `Œ¥ F X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ Œ¥ G X Y`. -/
class IsOplaxMonoidal : Prop where
  unit : œÑ.app (ùüô_ C) ‚â´ Œ∑ F‚ÇÇ = Œ∑ F‚ÇÅ := by aesop_cat
  tensor (X Y : C) : œÑ.app (X ‚äó Y) ‚â´ Œ¥ F‚ÇÇ _ _ = Œ¥ F‚ÇÅ _ _ ‚â´ (œÑ.app X ‚äó œÑ.app Y) := by aesop_cat

namespace IsOplaxMonoidal

attribute [reassoc (attr := simp)] unit tensor

instance id : IsOplaxMonoidal (ùüô F‚ÇÅ) where

instance comp (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) [IsOplaxMonoidal œÑ] [IsOplaxMonoidal œÑ'] :
    IsOplaxMonoidal (œÑ ‚â´ œÑ') where

instance hcomp (œÑ' : G‚ÇÅ ‚ü∂ G‚ÇÇ) [IsOplaxMonoidal œÑ] [IsOplaxMonoidal œÑ'] :
    IsOplaxMonoidal (œÑ ‚ó´ œÑ') where
  unit := sorry
  tensor X Y := sorry

instance : IsOplaxMonoidal F.leftUnitor.hom where
instance : IsOplaxMonoidal F.rightUnitor.hom where
instance : IsOplaxMonoidal (F.associator G H).hom where

end IsOplaxMonoidal

instance {F G : C ‚•§ D} {H K : C ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ K)
    [F.OplaxMonoidal] [G.OplaxMonoidal] [IsOplaxMonoidal Œ±]
    [H.OplaxMonoidal] [K.OplaxMonoidal] [IsOplaxMonoidal Œ≤] :
    IsOplaxMonoidal (NatTrans.prod' Œ± Œ≤) where
  unit := by
    ext
    ¬∑ rw [prod_comp_fst, prod'_Œ∑_fst, prod'_Œ∑_fst, prod'_app_fst, IsOplaxMonoidal.unit]
    ¬∑ rw [prod_comp_snd, prod'_Œ∑_snd, prod'_Œ∑_snd, prod'_app_snd, IsOplaxMonoidal.unit]
  tensor X Y := by
    ext
    ¬∑ simp only [prod_comp_fst, prod'_Œ¥_fst, prod'_app_fst,
        prodMonoidal_tensorHom, IsOplaxMonoidal.tensor]
    ¬∑ simp only [prod_comp_snd, prod'_Œ¥_snd, prod'_app_snd,
        prodMonoidal_tensorHom, IsOplaxMonoidal.tensor]

end NatTrans

namespace Iso

variable (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [NatTrans.IsOplaxMonoidal e.hom]

instance : NatTrans.IsOplaxMonoidal e.inv where
  unit := by rw [‚Üê NatTrans.IsOplaxMonoidal.unit (œÑ := e.hom), ‚Üê assoc, inv_hom_id_app, id_comp]
  tensor X Y := by
    rw [‚Üê cancel_epi (e.hom.app (X ‚äó Y)), ‚Üê assoc, ‚Üê assoc, hom_inv_id_app, id_comp,
      NatTrans.IsOplaxMonoidal.tensor]
    sorry

end Iso

-- namespace Adjunction

-- variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G)

-- open Functor LaxMonoidal OplaxMonoidal Monoidal

-- namespace IsOplaxMonoidal

-- variable [F.Monoidal] [G.OplaxMonoidal] [adj.IsMonoidal]

-- instance : NatTrans.IsOplaxMonoidal adj.unit where
--   unit := by
--     dsimp
--     rw [id_comp, ‚Üê unit_app_unit_comp_map_Œ∑ adj, assoc, Monoidal.map_Œ∑_Œ∑]
--     dsimp
--     rw [comp_id]
--   tensor X Y := by
--     dsimp
--     rw [‚Üê unit_app_tensor_comp_map_Œ¥_assoc, id_comp, Monoidal.map_Œ¥_Œ¥, comp_id]

-- instance : NatTrans.IsOplaxMonoidal adj.counit where
--   unit := by
--     dsimp
--     rw [assoc, map_Œ∑_comp_counit_app_unit adj, Œ∑_Œ∑]
--   tensor X Y := by
--     dsimp
--     rw [assoc, map_Œ¥_comp_counit_app_tensor, Œ¥_Œ¥_assoc, comp_id]

-- end IsOplaxMonoidal

-- namespace Equivalence

-- variable (e : C ‚âå D) [e.functor.Monoidal] [e.inverse.Monoidal] [e.IsOplaxMonoidal]

-- instance : NatTrans.IsOplaxMonoidal e.unit :=
--   inferInstanceAs (NatTrans.IsOplaxMonoidal e.toAdjunction.unit)

-- instance : NatTrans.IsOplaxMonoidal e.counit :=
--   inferInstanceAs (NatTrans.IsOplaxMonoidal e.toAdjunction.counit)

-- end Equivalence

-- end Adjunction

-- namespace OplaxMonoidalFunctor

-- /-- The type of monoidal natural transformations between (bundled) Oplax monoidal functors. -/
-- structure Hom (F G : OplaxMonoidalFunctor C D) where
--   /-- the natural transformation between the underlying functors -/
--   hom : F.toFunctor ‚ü∂ G.toFunctor
--   IsOplaxMonoidal : NatTrans.IsOplaxMonoidal hom := by infer_instance

-- attribute [instance] Hom.IsOplaxMonoidal

-- instance : Category (OplaxMonoidalFunctor C D) where
--   Hom := Hom
--   comp Œ± Œ≤ := ‚ü®Œ±.1 ‚â´ Œ≤.1, by have := Œ±.2; have := Œ≤.2; infer_instance‚ü©
--   id _ := ‚ü®ùüô _, inferInstance‚ü©

-- @[simp]
-- lemma id_hom (F : OplaxMonoidalFunctor C D) : Hom.hom (ùüô F) = ùüô _ := rfl

-- @[reassoc, simp]
-- lemma comp_hom {F G H : OplaxMonoidalFunctor C D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
--     (Œ± ‚â´ Œ≤).hom = Œ±.hom ‚â´ Œ≤.hom := rfl

-- @[ext]
-- lemma hom_ext {F G : OplaxMonoidalFunctor C D} {Œ± Œ≤ : F ‚ü∂ G} (h : Œ±.hom = Œ≤.hom) : Œ± = Œ≤ := by
--   cases Œ±; cases Œ≤; subst h; rfl

-- /-- Constructor for morphisms in the category `OplaxMonoidalFunctor C D`. -/
-- @[simps]
-- def homMk {F G : OplaxMonoidalFunctor C D} (f : F.toFunctor ‚ü∂ G.toFunctor)
--     [NatTrans.IsOplaxMonoidal f] :
--     F ‚ü∂ G := ‚ü®f, inferInstance‚ü©

-- /-- Constructor for isomorphisms in the category `OplaxMonoidalFunctor C D`. -/
-- @[simps]
-- def isoMk {F G : OplaxMonoidalFunctor C D} (e : F.toFunctor ‚âÖ G.toFunctor)
--     [NatTrans.IsOplaxMonoidal e.hom] :
--     F ‚âÖ G where
--   hom := homMk e.hom
--   inv := homMk e.inv

-- open Functor.OplaxMonoidal

-- /-- Constructor for isomorphisms between Oplax monoidal functors. -/
-- @[simps!]
-- def isoOfComponents {F G : OplaxMonoidalFunctor C D} (e : ‚àÄ X, F.obj X ‚âÖ G.obj X)
--     (naturality : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), F.map f ‚â´ (e Y).hom = (e X).hom ‚â´ G.map f := by
--       aesop_cat)
--     (unit : Œ∑ F.toFunctor ‚â´ (e (ùüô_ C)).hom = Œ∑ G.toFunctor := by aesop_cat)
--     (tensor : ‚àÄ X Y, Œ¥ F.toFunctor X Y ‚â´ (e (X ‚äó Y)).hom =
--       ((e X).hom ‚äó (e Y).hom) ‚â´ Œ¥ G.toFunctor X Y := by aesop_cat) :
--     F ‚âÖ G :=
--   @isoMk _ _ _ _ _ _ _ _ (NatIso.ofComponents e naturality) (by constructor <;> assumption)

-- end OplaxMonoidalFunctor

end CategoryTheory

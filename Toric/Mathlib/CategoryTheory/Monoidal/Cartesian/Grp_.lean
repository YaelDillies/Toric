/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.Algebra.Category.Grp.CartesianMonoidal
import Mathlib.CategoryTheory.Monoidal.Cartesian.Grp_
import Mathlib.CategoryTheory.Monoidal.FunctorCategory
import Toric.Mathlib.CategoryTheory.Monoidal.Cartesian.Mon_

section yoneda


/-!
# Yoneda embedding of `Grp_ C`

We show that group objects are exactly those whose yoneda presheaf is a presheaf of groups,
by constructing the yoneda embedding `Grp_ C ‚•§ C·µí·µñ ‚•§ GrpCat.{v}` and
showing that it is fully faithful and its (essential) image is the representable functors.

-/

open CategoryTheory Limits Mon_Class MonoidalCategory CartesianMonoidalCategory Opposite
open scoped Hom

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

scoped[Hom] attribute [instance] Hom.group

namespace CategoryTheory.Functor
variable {C D : Type*} [Category C] [Category D] [CartesianMonoidalCategory C]
  [CartesianMonoidalCategory D] {G : C} [Grp_Class G] (F : C ‚•§ D) [F.Monoidal]

scoped[Obj] attribute [instance] CategoryTheory.Functor.obj.instMon_Class

open scoped Obj

/-- The image of a group object under a monoidal functor is a group object. -/
noncomputable abbrev grp_ClassObj : Grp_Class (F.obj G) := (F.mapGrp.obj (.mk' G)).instGrp_ClassX

scoped[Obj] attribute [instance] CategoryTheory.Functor.grp_ClassObj

end CategoryTheory.Functor

section

open CartesianMonoidalCategory MonoidalCategory

variable {C : Type*} [Category C] [CartesianMonoidalCategory C] {G H : Grp_ C}

@[simps]
def Grp_.homMk {G H : C} [Grp_Class G] [Grp_Class H] (f : G ‚ü∂ H) [IsMon_Hom f] :
    Grp_.mk' G ‚ü∂ Grp_.mk' H := Mon_.Hom.mk' f

@[simp] lemma Grp_.homMk_hom' {G H : Grp_ C} (f : G ‚ü∂ H) : homMk f.hom = f := rfl

@[reassoc]
lemma Grp_Class.comp_div {G H K : C} (f g : G ‚ü∂ H) (h : K ‚ü∂ G) [Grp_Class H] :
    h ‚â´ (f / g) = h ‚â´ f / h ‚â´ g :=
  (((yonedaGrp.obj (.mk' H)).map (h.op)).hom.map_div f g)

@[reassoc]
lemma Grp_Class.div_comp {G H K : C} (f g : G ‚ü∂ H) (h : H ‚ü∂ K) [Grp_Class H] [Grp_Class K]
    [IsMon_Hom h] : (f / g) ‚â´ h = (f ‚â´ h) / (g ‚â´ h) :=
    (((yonedaGrp.map (Grp_.homMk h)).app (.op G)).hom.map_div f g)

lemma Grp_Class.inv_eq_comp_inv {G H : C} (f : G ‚ü∂ H) [Grp_Class H] : f ‚â´ Œπ = f‚Åª¬π := rfl

lemma Grp_Class.mul_eq_comp_mul {G H : C} {f g : G ‚ü∂ H} [Grp_Class H] : f * g = lift f g ‚â´ Œº := rfl

lemma Grp_Class.mul_inv_rev [BraidedCategory C] {G : C} [Grp_Class G] :
    Œº ‚â´ Œπ = ((Œπ : G ‚ü∂ G) ‚äó Œπ) ‚â´ (Œ≤_ _ _).hom ‚â´ Œº := by
  calc
    _ = ((fst G G) * (snd G G)) ‚â´ Œπ := by rw [mul_eq_mul]
    _ = (snd G G)‚Åª¬π * (fst G G)‚Åª¬π := by rw [Grp_Class.inv_eq_comp_inv]; simp
    _ = lift (snd G G ‚â´ Œπ) (fst G G ‚â´ Œπ) ‚â´ Œº := rfl
    _ = lift (fst G G ‚â´ Œπ) (snd G G ‚â´ Œπ) ‚â´ (Œ≤_ G G).hom ‚â´ Œº := by simp
    _ = ((Œπ : G ‚ü∂ G) ‚äó Œπ) ‚â´ (Œ≤_ _ _).hom ‚â´ Œº := by simp

/-- If `G` is a commutative group object, then `Hom(X, G)` has a commutative group structure. -/
abbrev Hom.commGroup [BraidedCategory C] {G H : C} [Grp_Class H] [IsCommMon H] :
    CommGroup (G ‚ü∂ H) where
  __ := Hom.commMonoid
  inv_mul_cancel f := by simp

scoped[Hom] attribute [instance] Hom.commGroup

@[reassoc]
lemma Grp_Class.comp_zpow {G H K : C} [Grp_Class H] (f : G ‚ü∂ H) (h : K ‚ü∂ G) :
    ‚àÄ n : ‚Ñ§, h ‚â´ f ^ n = (h ‚â´ f) ^ n
  | (n : ‚Ñï) => by simp [comp_pow]
  | .negSucc n => by simp [comp_pow, comp_inv]

namespace Grp_

@[simp] lemma mk'_X (G : C) [Grp_Class G] : (mk' G).X = G := rfl

namespace Hom

instance instOne : One (G ‚ü∂ H) := inferInstanceAs <| One (G.toMon_ ‚ü∂ H.toMon_)

lemma hom_one : (1 : (G ‚ü∂ H)).hom = 1 := rfl

variable [BraidedCategory C] [IsCommMon H.X]

instance instMul : Mul (G ‚ü∂ H) := inferInstanceAs <| Mul (G.toMon_ ‚ü∂ H.toMon_)

@[simp]
lemma hom_mul (f g : G ‚ü∂ H) : (f * g).hom = f.hom * g.hom := rfl

instance instPow : Pow (G ‚ü∂ H) ‚Ñï := inferInstanceAs <| Pow (G.toMon_ ‚ü∂ H.toMon_) ‚Ñï

@[simp]
lemma hom_pow (f : G ‚ü∂ H) (n : ‚Ñï) : (f ^ n).hom = f.hom ^ n := rfl

instance {G : C} [Grp_Class G] [IsCommMon G] : IsMon_Hom (Œπ : G ‚ü∂ G) where
  one_hom := by simp only [one_eq_one]; exact inv_one
  mul_hom := by
    simp [Grp_Class.mul_inv_rev]

instance {f : G ‚ü∂ H} [IsCommMon H.X] : IsMon_Hom f.hom‚Åª¬π where
  one_hom := by
    change _ ‚â´ _ ‚â´ _ = _
    simp [Mon_Class.one_eq_one, one_comp]
  mul_hom := by
    simp [‚Üê Grp_Class.inv_eq_comp_inv]

instance instInv : Inv (G ‚ü∂ H) where
  inv f := {
    hom := f.hom‚Åª¬π
    one_hom := by simp only [Mon_.one_eq_one, one_comp_assoc]; rw [one_comp]
    mul_hom := by simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp]
  }

@[simp]
lemma hom_inv (f : G ‚ü∂ H) : (f‚Åª¬π).hom = f.hom‚Åª¬π := rfl

instance instDiv : Div (G ‚ü∂ H) where
  div f g :=
  { hom := f.hom / g.hom
    one_hom := by simp [Mon_.one_eq_one, Grp_Class.comp_div, Mon_Class.one_comp]
    mul_hom := by
      simp [Mon_.mul_eq_mul, Grp_Class.comp_div, Mon_Class.comp_mul, Mon_Class.mul_comp,
          mul_div_mul_comm] }

@[simp]
lemma hom_div (f g : G ‚ü∂ H) : (f / g).hom = f.hom / g.hom := rfl

instance instPowInt : Pow (G ‚ü∂ H) ‚Ñ§ where
  pow f i := {
    hom := f.hom ^ i
    one_hom := by simp [Mon_.one_eq_one, Mon_Class.one_comp, Grp_Class.comp_zpow]
    mul_hom := by
      simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp, Grp_Class.comp_zpow, mul_zpow]
  }

@[simp]
lemma hom_zpow (f : G ‚ü∂ H) (n : ‚Ñ§) : (f ^ n).hom = f.hom ^ n := rfl

instance instCommGroup : CommGroup (G ‚ü∂ H) :=
  Function.Injective.commGroup Mon_.Hom.hom (fun _ _ ‚Ü¶ Mon_.Hom.ext)
    hom_one hom_mul hom_inv hom_div hom_pow hom_zpow

end Grp_.Hom

variable {C : Type*} [Category C] [CartesianMonoidalCategory C] [BraidedCategory C] {G : C}

instance Grp_.mk'.X.instIsComm_Mon [Grp_Class G] [IsCommMon G] : IsCommMon (Grp_.mk' G).X := ‚Äπ_‚Ä∫

end

namespace CategoryTheory
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [CartesianMonoidalCategory C]
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [CartesianMonoidalCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [CartesianMonoidalCategory E]

namespace Functor
variable {F F' : C ‚•§ D} [F.Monoidal] [F'.Monoidal] {G : D ‚•§ E} [G.Monoidal]

open LaxMonoidal Monoidal

protected instance Faithful.mapGrp [F.Faithful] : F.mapGrp.Faithful where
  map_injective {_X _Y} _f _g hfg := F.mapMon.map_injective hfg

protected instance Full.mapGrp [F.Full] [F.Faithful] : F.mapGrp.Full where
  map_surjective := F.mapMon.map_surjective

/-- If `F : C ‚•§ D` is a fully faithful monoidal functor, then `Grp(F) : Grp C ‚•§ Grp D` is fully
faithful too. -/
protected noncomputable def FullyFaithful.mapGrp (hF : F.FullyFaithful) :
    F.mapGrp.FullyFaithful where
  preimage {X Y} f := Grp_.homMk <| hF.preimage f.hom

open EssImageSubcategory Monoidal in
/-- The essential image of a full and faithful functor between cartesian-monoidal categories is the
same on group objects as on objects. -/
@[simp] lemma essImage_mapGrp [F.Full] [F.Faithful] {G : Grp_ D} :
    F.mapGrp.essImage G ‚Üî F.essImage G.X where
  mp := by rintro ‚ü®H, ‚ü®e‚ü©‚ü©; exact ‚ü®H.X, ‚ü®(Grp_.forget _).mapIso e‚ü©‚ü©
  mpr hG := by
    letI F' := F.toEssImage.asEquivalence
    have : F'.inverse.Monoidal := .ofChosenFiniteProducts _
    refine ‚ü®F'.inverse.mapGrp.obj <| {
        X := ‚ü®G.X, hG‚ü©
        one := G.one
        mul := G.mul
        one_mul := by simpa only [whiskerRight_def] using G.one_mul
        mul_one := by simpa only [whiskerLeft_def] using G.mul_one
        mul_assoc := by
          simpa only [whiskerLeft_def, whiskerRight_def, associator_hom_def] using G.mul_assoc
        inv := G.inv
        left_inv := by simpa only [lift_def, toUnit_def] using G.left_inv
        right_inv := by simpa only [lift_def, toUnit_def] using G.right_inv
      }, ‚ü®Grp_.mkIso
        ((ObjectProperty.Œπ _).mapIso <| F'.counitIso.app ‚ü®G.X, hG‚ü©) ?_ ?_‚ü©‚ü©
    ¬∑ simp
      erw [F'.counitIso.hom.naturality (X := ùüô_ F.EssImageSubcategory) (Y := ‚ü®G.X, hG‚ü©) G.one]
      have : Œµ F ‚â´ F.map (Œµ F'.inverse) ‚â´ F'.counitIso.hom.app (ùüô_ F.EssImageSubcategory) = ùüô _ :=
        toUnit_unique ..
      apply_fun (¬∑ ‚â´ (G.one : ùüô_ F.EssImageSubcategory ‚ü∂ ‚ü®G.X, hG‚ü©)) at this
      simpa using this
    ¬∑ simp
      erw [F'.counitIso.hom.naturality (X := ‚ü®G.X, hG‚ü© ‚äó ‚ü®G.X, hG‚ü©) (Y := ‚ü®G.X, hG‚ü©) G.mul]
      have :
        ¬´Œº¬ª F _ _ ‚â´ F.map (¬´Œº¬ª F'.inverse ‚ü®G.X, hG‚ü© ‚ü®G.X, hG‚ü©) ‚â´ F'.counitIso.hom.app _ =
          F'.counitIso.hom.app _ ‚äó F'.counitIso.hom.app _ := by
        --erw [F'.functor_map_Œº_inverse_comp_counitIso_hom_app_tensor]
        simp
        refine hom_ext _ _ ?_ ?_
        ¬∑ refine Eq.trans ?_ (tensorHom_fst (F'.counitIso.hom.app ‚ü®G.X, hG‚ü©)
            (F'.counitIso.hom.app ‚ü®G.X, hG‚ü©)).symm
          sorry
        ¬∑ sorry
      apply_fun (¬∑ ‚â´ (G.mul : (‚ü®G.X, hG‚ü© ‚äó ‚ü®G.X, hG‚ü© : F.EssImageSubcategory) ‚ü∂ ‚ü®G.X, hG‚ü©)) at this
      sorry

end Functor
end CategoryTheory

end yoneda

/-!
# Group objects form a cartesian-monoidal category
-/

open CategoryTheory MonoidalCategory Limits CartesianMonoidalCategory Mon_Class

attribute [local simp] leftUnitor_hom rightUnitor_hom

namespace CategoryTheory

universe u v v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [CartesianMonoidalCategory C]

@[simps]
def homToProd {X Y Z : C} : (Z ‚ü∂ X ‚äó Y) ‚âÉ (Z ‚ü∂ X) √ó (Z ‚ü∂ Y) where
  toFun f := ‚ü®f ‚â´ fst _ _, f ‚â´ snd _ _‚ü©
  invFun f := lift f.1 f.2
  left_inv _ := by simp
  right_inv _ := by simp

namespace Functor
variable {D E : Type*} [Category D] [Category E] [CartesianMonoidalCategory E]

noncomputable def tensorObjComp (F G : D ‚•§ C) (H : C ‚•§ E) [PreservesFiniteProducts H] :
    (F ‚äó G) ‚ãô H ‚âÖ (F ‚ãô H) ‚äó (G ‚ãô H) :=
  NatIso.ofComponents (fun X ‚Ü¶ prodComparisonIso H (F.obj X) (G.obj X)) fun {X Y} f ‚Ü¶ by
    dsimp
    ext <;> simp [‚Üê Functor.map_comp]

protected def RepresentableBy.tensorObj {F : C·µí·µñ ‚•§ Type v} {G : C·µí·µñ ‚•§ Type v} {X Y : C}
    (h‚ÇÅ : F.RepresentableBy X) (h‚ÇÇ : G.RepresentableBy Y) : (F ‚äó G).RepresentableBy (X ‚äó Y) where
  homEquiv {Z} := homToProd.trans (Equiv.prodCongr h‚ÇÅ.homEquiv h‚ÇÇ.homEquiv)
  homEquiv_comp {Z W} f g := by
    refine Prod.ext ?_ ?_
    ¬∑ refine (h‚ÇÅ.homEquiv_comp _ _).trans ?_
      simp
      change
        F.map f.op (F.map g.op (h‚ÇÅ.homEquiv (fst X Y))) = F.map f.op (h‚ÇÅ.homEquiv (g ‚â´ fst X Y))
      simp [h‚ÇÅ.homEquiv_comp]
    ¬∑ refine (h‚ÇÇ.homEquiv_comp _ _).trans ?_
      simp
      change
        G.map f.op (G.map g.op (h‚ÇÇ.homEquiv (snd X Y))) = G.map f.op (h‚ÇÇ.homEquiv (g ‚â´ snd X Y))
      simp [h‚ÇÇ.homEquiv_comp]

end CategoryTheory.Functor

section

variable {C : Type*} [Category C] [CartesianMonoidalCategory C]
    {X Y : C} [Grp_Class X] [Grp_Class Y]

@[simps]
instance : Grp_Class <| ùüô_ C where
  one := ùüô _
  mul := toUnit _
  inv := ùüô _


/- noncomputable instance : Grp_Class <| X ‚äó Y where
  inv := Œπ ‚äó Œπ
  left_inv' := by
    ext
    ¬∑ simp
  right_inv' := _ -/

noncomputable instance Grp_Class_tensorObj : Grp_Class <| X ‚äó Y :=
  .ofRepresentableBy _ (yonedaGrpObj X ‚äó yonedaGrpObj Y) <| .ofIso
    ((yonedaGrpObjRepresentableBy _).tensorObj (yonedaGrpObjRepresentableBy _))
      (Functor.tensorObjComp _ _ _).symm

@[simp]
lemma prodObj : (Grp_.mk' (X ‚äó Y)).X = X ‚äó Y := rfl

-- TODO: complain on Zulip
@[ext]
lemma prodExt {Z : C} {f g : Z ‚ü∂ (Grp_.mk' (X ‚äó Y)).X} (h‚ÇÅ : f ‚â´ fst _ _ = g ‚â´ fst _ _)
    (h‚ÇÇ : f ‚â´ snd _ _ = g ‚â´ snd _ _) : f = g := by
  simp at f g
  sorry

lemma prodOne : Œ∑[X ‚äó Y] = lift Œ∑ Œ∑ := by
  ext <;> simp <;> sorry

lemma prodInv : Œπ[X ‚äó Y] = Œπ[X] ‚äó Œπ[Y] := sorry

noncomputable instance : CartesianMonoidalCategory <| Grp_ C :=
  .ofChosenFiniteProducts {
    cone.pt := Grp_.mk' (ùüô_ C)
    cone.œÄ.app := isEmptyElim
    cone.œÄ.naturality := isEmptyElim
    isLimit.lift s := {
      hom := toUnit _
      one_hom := toUnit_unique _ _
      mul_hom := toUnit_unique _ _
    }
    isLimit.uniq s m h := by ext; exact toUnit_unique _ _
  } fun X Y ‚Ü¶ {
    cone.pt := .mk' (X.X ‚äó Y.X)
    cone.œÄ.app := by
      rintro (_|_)
      ¬∑ refine ‚ü®fst X.X Y.X, ?_, ?_‚ü©
        ¬∑ simp [Grp_.mk']
          sorry
        simp [Grp_.mk']
        sorry
      sorry
    cone.œÄ.naturality := sorry
    isLimit.lift s := {
      hom := by
        dsimp
        sorry
      one_hom := sorry
      mul_hom := sorry
    }
    isLimit.fac := sorry
    isLimit.uniq := sorry
  }

end

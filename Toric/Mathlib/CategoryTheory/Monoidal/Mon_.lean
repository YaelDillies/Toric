/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.CategoryTheory.Monoidal.Mon_

open CategoryTheory Mon_Class MonoidalCategory

assert_not_exists ChosenFiniteProducts

section
variable {C : Type*} [Category C] [MonoidalCategory C]

namespace Mon_Class

theorem mul_assoc_flip (X : C) [Mon_Class X] : X ‚óÅ Œº ‚â´ Œº = (Œ±_ X X X).inv ‚â´ Œº ‚ñ∑ X ‚â´ Œº := by simp

end Mon_Class

variable [BraidedCategory C] {G : C}

instance Mon_.mk'.X.instIsComm_Mon [Mon_Class G] [IsCommMon G] : IsCommMon (Mon_.mk' G).X := ‚Äπ_‚Ä∫

end

namespace Mon_
variable {C : Type*} [Category C] [MonoidalCategory C] {M N : Mon_ C}

-- TODO: Rewrite `Mon_.mul_assoc_flip` to this
example : (M.X ‚óÅ M.mul) ‚â´ M.mul = (Œ±_ M.X M.X M.X).inv ‚â´ (M.mul ‚ñ∑ M.X) ‚â´ M.mul :=
  Mon_Class.mul_assoc_flip M.X

end Mon_

open Limits

namespace CategoryTheory.Functor
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory D]
variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory E]
variable (F F' : C ‚•§ D) (G : D ‚•§ E)

open LaxMonoidal

@[simps!]
noncomputable def mapMonIdIso : mapMon (ùü≠ C) ‚âÖ ùü≠ (Mon_ C) :=
  NatIso.ofComponents fun X ‚Ü¶ Mon_.mkIso (.refl _)

@[simps!]
noncomputable def mapMonCompIso [F.LaxMonoidal] [G.LaxMonoidal] :
    (F ‚ãô G).mapMon ‚âÖ F.mapMon ‚ãô G.mapMon :=
  NatIso.ofComponents fun X ‚Ü¶ Mon_.mkIso (.refl _)

end CategoryTheory.Functor

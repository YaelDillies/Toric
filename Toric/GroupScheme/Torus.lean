/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.FieldTheory.Separable
import Toric.GroupScheme.Diagonalizable
import Toric.Mathlib.CategoryTheory.Comma.Over.OverClass
import Toric.Mathlib.CategoryTheory.Monoidal.Grp_
import Toric.Mathlib.Algebra.Category.Grp.Basic
import Mathlib.Algebra.Category.Grp.Adjunctions
import Mathlib.Algebra.Category.Ring.Adjunctions
import Toric.MvLaurentPolynomial

/-!
# The standard algebraic torus

This file defines the standard algebraic torus over `Spec R` as `Spec (R ‚äó ‚Ñ§[F‚Çô])`.
-/

noncomputable section

open CategoryTheory Opposite Limits
open scoped AddMonoidAlgebra

universe u

namespace AlgebraicGeometry.Scheme
section IsSplitTorusOver
variable {G H S : Scheme.{u}} [G.Over S] [H.Over S] [Grp_Class (asOver G S)]
  [Grp_Class (asOver H S)]

variable (G S) in
@[mk_iff]
class IsSplitTorusOver : Prop where
  existsIso :
    ‚àÉ (A : Type u) (_ : AddCommGroup A) (_ : Module.Free ‚Ñ§ A) (e : G ‚âÖ Diag S A)
      (_ : e.hom.IsOver S), IsMon_Hom (e.hom.asOver S)

instance diag_isSplitTorusOver {A : Type u} [AddCommGroup A] [Module.Free ‚Ñ§ A] :
    (Diag S A).IsSplitTorusOver S :=
  ‚ü®A, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, by exact .refl (S.Diag A), by dsimp; infer_instance, by dsimp; infer_instance‚ü©

lemma IsSplitTorusOver.of_isIso [H.IsSplitTorusOver S] (f : G ‚ü∂ H) [IsIso f] [f.IsOver S]
    [IsMon_Hom (f.asOver S)] : G.IsSplitTorusOver S :=
  have : IsMon_Hom ((asIso f).hom.asOver S) := ‚Äπ_‚Ä∫
  let ‚ü®A, _, _, e, _, _‚ü© := ‚ÄπH.IsSplitTorusOver S‚Ä∫
  ‚ü®A, _, ‚Äπ_‚Ä∫, (asIso f).trans e, by dsimp; infer_instance, by dsimp; infer_instance‚ü©

lemma IsSplitTorusOver.of_isIso' [G.IsSplitTorusOver S]
    (f : G ‚ü∂ H) [IsIso f] [f.IsOver S] [IsMon_Hom (f.asOver S)] : H.IsSplitTorusOver S :=
  have : IsMon_Hom ((inv f).asOver S) := by
    simpa using inferInstanceAs <| IsMon_Hom (asIso <| f.asOver S).inv
  .of_isIso (inv f)

lemma IsSplitTorusOver.of_iso [H.IsSplitTorusOver S] (e : G ‚âÖ H) [e.hom.IsOver S]
    [IsMon_Hom (e.hom.asOver S)] : G.IsSplitTorusOver S := of_isIso e.hom

variable (G S) in
/-- Every split torus that's locally of finite type is isomorphic to `ùîæ‚Çò‚Åø` for some `n`. -/
lemma exists_iso_diag_finite_of_isSplitTorusOver_locallyOfFiniteType [G.IsSplitTorusOver S]
    [hG : LocallyOfFiniteType (G ‚Üò S)] [Nonempty S] :
    ‚àÉ (Œπ : Type u) (_ : Finite Œπ) (e : G ‚âÖ Diag S ‚Ñ§[Œπ]) (_ : e.hom.IsOver S),
      IsMon_Hom (e.hom.asOver S) := by
  obtain ‚ü®A, _, _, e, _, _‚ü© := ‚ÄπG.IsSplitTorusOver S‚Ä∫
  replace hG : LocallyOfFiniteType (Diag S A ‚Üò S) := by
    rw [‚Üê MorphismProperty.cancel_left_of_respectsIso @LocallyOfFiniteType e.hom]
    erw [comp_over e.hom]
    assumption
  rw [locallyOfFiniteType_diag_iff] at hG
  exact ‚ü®Module.Free.ChooseBasisIndex ‚Ñ§ A, inferInstance,
    e.trans <| Diag.mapIso S (Module.Free.chooseBasis ‚Ñ§ A).repr.toAddEquiv,
    by dsimp; infer_instance, by dsimp; infer_instance‚ü©

end IsSplitTorusOver

section IsTorusOver
variable {k : Type u} [Field k] {G H : Scheme.{u}} [G.Over Spec(k)] [H.Over Spec(k)]
  [Grp_Class (G.asOver Spec(k))] [Grp_Class (H.asOver Spec(k))]

variable (k G) in
@[mk_iff]
class IsTorusOver : Prop where
  existsSplit :
    ‚àÉ (L : Type u) (_ : Field L) (_ : Algebra k L) (_ : Algebra.IsSeparable k L),
      (pullback (G ‚Üò Spec(k)) <| Spec.map <| CommRingCat.ofHom <|
        algebraMap k L).IsSplitTorusOver Spec(L)

instance [G.IsSplitTorusOver Spec(k)] : G.IsTorusOver k := by
  refine ‚ü®k, ‚Äπ_‚Ä∫, inferInstance, inferInstance, ?_‚ü©
  simp only [Algebra.id.map_eq_id, CommRingCat.ofHom_id]
  suffices (pullback (G ‚Üò Spec(k)) (ùüô _)).IsSplitTorusOver Spec(k) by
    convert this <;> simp
  exact .of_isIso (pullback.fst (G ‚Üò Spec(k)) (ùüô _))

lemma IsTorusOver.of_iso (e : G ‚âÖ H) [e.hom.IsOver Spec(k)] [IsMon_Hom (e.hom.asOver Spec(k))]
    [H.IsTorusOver k] : G.IsTorusOver k := by
  obtain ‚ü®L, _, _, _, hH‚ü© := ‚ÄπH.IsTorusOver k‚Ä∫
  refine ‚ü®L, _, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, ?_‚ü©
  let e'' := (Over.pullback <| Spec.map <| CommRingCat.ofHom <| algebraMap k L).mapGrp.mapIso <|
    Grp_.mkIso (M := .mk <| G.asOver Spec(k)) (N := .mk <| H.asOver Spec(k)) (Over.isoMk e)
      (IsMon_Hom.one_hom (e.hom.asOver Spec(k))) (IsMon_Hom.mul_hom (e.hom.asOver Spec(k)))
  let e' := (Grp_.forget _ ‚ãô Over.forget _).mapIso e''
  dsimp at e'
  have : e'.hom.IsOver Spec(L) := by simp [e', e'']
  have : IsMon_Hom <| e'.hom.asOver Spec(L) := Mon_.instIsMon_HomHom e''.hom
  exact .of_iso e'

lemma IsTorusOver.of_isIso [H.IsTorusOver k]
    (f : G ‚ü∂ H) [IsIso f] [f.IsOver Spec(k)] [IsMon_Hom (f.asOver Spec(k))] :
    G.IsTorusOver k :=
  have : IsMon_Hom (Hom.asOver (asIso f).hom Spec(k)) := ‚Äπ_‚Ä∫
  .of_iso (asIso f)

end IsTorusOver

/-- The (split) algebraic torus over `S` indexed by `œÉ`. -/
abbrev SplitTorus (S : Scheme) (œÉ : Type u) : Scheme.{u} := Diag S <| FreeAbelianGroup œÉ

@[inherit_doc SplitTorus]
notation3 "ùîæ‚Çò[" S ", " œÉ "]" => SplitTorus S œÉ

/-- The multiplicative group over `S`. -/
notation3 "ùîæ‚Çò["S"]" => ùîæ‚Çò[S, PUnit]

-- attribute [ext] Comma

-- def SplitTorus.representableBy (S : Scheme) (œÉ : Type*) :
--     ((Over.forget _).op ‚ãô Scheme.Œì ‚ãô forget‚ÇÇ _ CommMonCat ‚ãô CommMonCat.units ‚ãô
--       CommGrp.coyonedaRight.obj (op œÉ) ‚ãô CategoryTheory.forget _).RepresentableBy
--       (ùîæ‚Çò[S, œÉ].asOver S) := by
--   letI X :=
--   (((((Over.mapPullbackAdj (specULiftZIsTerminal.from S)).comp
--     (Over.equivalenceOfIsTerminal specULiftZIsTerminal).toAdjunction).comp <|
--     (ŒìSpec.adjunction.comp <| (CommRingCat.forget‚ÇÇAdj CommRingCat.isInitial).op.comp <|
--       CommGrp.forget‚ÇÇCommMonAdj.op.comp <|
--         commGroupAddCommGroupEquivalence.symm.toAdjunction.op.comp <|
--           AddCommGrp.adj.op)).representableBy (op œÉ)).ofIso <|
--     isoWhiskerRight (NatIso.op (Over.forgetMapTerminal _ _))
--       (Scheme.Œì ‚ãô forget‚ÇÇ _ CommMonCat ‚ãô
--         CommMonCat.units ‚ãô CategoryTheory.forget _ ‚ãô opOp _ ‚ãô yoneda.obj (op œÉ)) ‚â™‚â´
--         (isoWhiskerLeft ((Over.forget _).op ‚ãô Scheme.Œì ‚ãô forget‚ÇÇ _ CommMonCat ‚ãô
--           CommMonCat.units ‚ãô CategoryTheory.forget CommGrp) (Coyoneda.opIso.app _)))
--   convert X using 1
--   apply Comma.ext
--   ¬∑ dsimp [SplitTorus, Diag]
--     congr 1


variable {R : CommRingCat} {œÉ : Type*}

variable (R œÉ) in
/-- The split torus with dimensions `œÉ` over `Spec R` is isomorphic to `Spec R[‚Ñ§^œÉ]`. -/
abbrev splitTorusIso (R : CommRingCat) (œÉ : Type*) :
    ùîæ‚Çò[Spec R, œÉ] ‚âÖ Spec(MvLaurentPolynomial œÉ R) := diagSpecIso _ _

end AlgebraicGeometry.Scheme

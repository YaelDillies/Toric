/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.FieldTheory.Separable
import Toric.GroupScheme.Torus
import Toric.Mathlib.Algebra.FreeAbelianGroup.Finsupp
import Toric.Mathlib.Algebra.Group.Equiv.Basic
import Toric.Mathlib.GroupTheory.FreeAbelianGroup
import Toric.Mathlib.LinearAlgebra.PerfectPairing.Basic

/-!
# The lattices of characters and cocharacters
-/

noncomputable section

open AddMonoidAlgebra CategoryTheory
open scoped Hom

namespace AlgebraicGeometry.Scheme
universe u

section general_base
variable {œÉ : Type u} {S G : Scheme.{u}} [G.Over S]

section Grp_Class
variable [Grp_Class (G.asOver S)]

variable (S G) in
/-- The characters of the group scheme `G` over `S` are the group morphisms `G ‚ü∂/S ùîæ‚Çò[S]`. -/
abbrev Char := HomGrp G ùîæ‚Çò[S] S

variable (S G) in
/-- The cocharacters of the group scheme `G` over `S` are the group morphisms `ùîæ‚Çò[S] ‚ü∂/S G`. -/
abbrev Cochar := HomGrp ùîæ‚Çò[S] G S

@[inherit_doc] notation "X("S", "G")" => Char S G
@[inherit_doc] notation "X*("S", "G")" => Cochar S G

end Grp_Class

section CommGrp_Class
variable [CommGrp_Class (G.asOver S)]

/-- The perfect pairing between characters and cocharacters, valued in the characters of the
algebraic torus. -/
@[simps]
noncomputable def charPairingAux : X*(S, G) ‚Üí+ X(S, G) ‚Üí+ X(S, ùîæ‚Çò[S]) where
  toFun œá :=
  { toFun œá' := œá.comp œá', map_zero' := by simp, map_add' := by simp [HomGrp.add_comp] }
  map_zero' := by ext f; simp
  map_add' œá œá' := by ext; simp [HomGrp.comp_add]

end CommGrp_Class
end general_base

section IsDomain
variable {R : CommRingCat.{u}} [IsDomain R] {œÉ : Type u} {G : Scheme.{u}} [G.Over (Spec R)]

section AddCommGroup
variable {G : Type u} [AddCommGroup G]

variable (R) in
/-- Characters of a diagonal group scheme over a domain are exactly the input group.

Note: This is true over a general ring using Cartier duality, but we do not prove that. -/
def charGrpAlg : X(Spec R, Diag (Spec R) G) ‚âÉ+ G :=
  Scheme.diagHomEquiv.symm.trans
    (FreeAbelianGroup.liftAddEquiv.symm.trans (AddEquiv.piUnique fun _ ‚Ü¶ G))

lemma charGrpAlg_symm_apply (g : G) :
  ((charGrpAlg R (G := G)).symm g) = diagHomGrp _ (FreeAbelianGroup.lift fun _ ‚Ü¶ g) := rfl

lemma charGrpAlg_apply_diag (f : _ ‚Üí+ G) :
    ((charGrpAlg R (G := G)) (diagHomGrp _ f)) = f (.of 0) := by
  apply (charGrpAlg R (G := G)).symm.injective
  simp [charGrpAlg_symm_apply]
  congr 1
  ext
  simp only [FreeAbelianGroup.lift.of]

variable (R) in
/-- Cocharacters of a diagonal group scheme over a domain are exactly the dual of the input group.

Note: This is true over a general ring using Cartier duality, but we do not prove that. -/
def cocharGrpAlg : X*(Spec R, Diag (Spec R) G) ‚âÉ+ (G ‚Üí+ ‚Ñ§) :=
  Scheme.diagHomEquiv.symm.trans (AddMonoidHom.postcompAddEquiv (FreeAbelianGroup.punitEquiv _))

lemma cocharGrpAlg_symm_apply (g : G ‚Üí+ ‚Ñ§) :
  ((cocharGrpAlg R (G := G)).symm g) =
    diagHomGrp _ ((FreeAbelianGroup.punitEquiv _).symm.toAddMonoidHom.comp g) := rfl

end AddCommGroup

/-- Characters of the algebraic torus with dimensions `œÉ`over a domain `R` are exactly `‚Ñ§^œÉ`.

Note: This is true over a general base using Cartier duality, but we do not prove that. -/
def charTorus : X(Spec R, ùîæ‚Çò[Spec R, œÉ]) ‚âÉ+ (œÉ ‚Üí‚ÇÄ ‚Ñ§) :=
  (charGrpAlg R).trans (FreeAbelianGroup.equivFinsupp _)

def charTorusUnit : X(Spec R, ùîæ‚Çò[Spec R]) ‚âÉ+ ‚Ñ§ :=
  (charGrpAlg R).trans (FreeAbelianGroup.punitEquiv _)

/-- Cocharacters of the algebraic torus with dimensions `œÉ`over a domain `R` are exactly `‚Ñ§^œÉ`.

Note: This is true over a general base using Cartier duality, but we do not prove that. -/
def cocharTorus : X*(Spec R, ùîæ‚Çò[Spec R, œÉ]) ‚âÉ+ (œÉ ‚Üí ‚Ñ§) :=
  (cocharGrpAlg R).trans ‚ü®FreeAbelianGroup.lift.symm, fun _ _ ‚Ü¶ rfl‚ü©

section CommGrp_Class
variable [CommGrp_Class (G.asOver (Spec R))]

variable (R G) in
attribute [local instance 1000000] AddEquivClass.instAddHomClass AddMonoidHomClass.toAddHomClass
  AddEquivClass.instAddMonoidHomClass in
attribute [-simp] charPairingAux_apply_apply in
/-- The `‚Ñ§`-valued perfect pairing between characters and cocharacters of group schemes over a
domain.

Note: This exists over a general base using Cartier duality, but we do not prove that.  -/
noncomputable def charPairing : X*(Spec R, G) ‚Üí‚Çó[‚Ñ§] X(Spec R, G) ‚Üí‚Çó[‚Ñ§] ‚Ñ§ where
  toFun x :=
  { toFun y := charTorusUnit (R := R) (charPairingAux (S := Spec R) (G := G) x y)
    map_add' _ _ := by simp only [map_add]
    map_smul' _ _ := by simp only [map_zsmul, smul_eq_mul, eq_intCast, Int.cast_eq] }
  map_add' _ _ := by ext; simp only [map_add, AddMonoidHom.add_apply, LinearMap.coe_mk,
    AddHom.coe_mk, LinearMap.add_apply]
  map_smul' _ _ := by ext; simp only [map_zsmul, AddMonoidHom.coe_smul, Pi.smul_apply, smul_eq_mul,
    LinearMap.coe_mk, AddHom.coe_mk, eq_intCast, Int.cast_eq, LinearMap.smul_apply]

instance isPerfPair_charPairing [Finite œÉ] : (charPairing R ùîæ‚Çò[Spec R, œÉ]).IsPerfPair := by
  refine .congr (.id (R := ‚Ñ§) (M := Module.Dual ‚Ñ§ (œÉ ‚Üí‚ÇÄ ‚Ñ§)))
    ((cocharTorus (R := R) (œÉ := œÉ)).trans (Finsupp.lift ..)).toIntLinearEquiv
    (charTorus (R := R) (œÉ := œÉ)).toIntLinearEquiv _ ?_
  ext f x
  apply (charTorusUnit (R := R)).symm.injective
  apply Additive.ofMul.symm.injective
  dsimp [charGrpAlg_symm_apply, charPairing, charTorusUnit, charTorus, cocharTorus,
    cocharGrpAlg_symm_apply]
  simp only [Char, AddEquiv.symm_apply_apply, diagHomGrp_comp, charGrpAlg_apply_diag]
  simp only [PUnit.zero_eq, AddMonoidHom.coe_comp, AddMonoidHom.coe_coe, Function.comp_apply,
    FreeAbelianGroup.lift.of, EmbeddingLike.apply_eq_iff_eq, Finsupp.toFreeAbelianGroup_single]
  congr! 4 with x
  erw [Finsupp.toFreeAbelianGroup_single]
  simp

end CommGrp_Class
end IsDomain
end AlgebraicGeometry.Scheme

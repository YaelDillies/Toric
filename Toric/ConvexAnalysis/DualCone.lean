/-
Copyright (c) 2025 Aaron Liu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Aaron Liu, Justus Springer
-/
import Mathlib.Analysis.Convex.Cone.Pointed
import Toric.ConvexAnalysis.PolyhedralCone

/-!
# Lemmas

Prove some lemmas about the dual cone.
-/

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]

open Classical
open scoped InnerProductSpace

namespace PointedCone

/-- The dual of an arbitrary set as a `PointedCone`. -/
def dual' (S : Set E) : PointedCone ‚Ñù E :=
  (S.innerDualCone).toPointedCone <| pointed_innerDualCone S

@[simp, norm_cast]
theorem toConvexCone_dual' (S : Set E) : ‚Üë(dual' S) = (S : Set E).innerDualCone :=
  rfl

@[simp]
theorem mem_dual' {S : Set E} {y : E} : y ‚àà dual' S ‚Üî ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà S ‚Üí 0 ‚â§ ‚ü™x, y‚ü´_‚Ñù := by
  rfl

lemma dual'_le_dual' {s t : Set E} (h : s ‚äÜ t) : dual' t ‚â§ dual' s := by
  intro x hx y hy
  exact hx y (h hy)

lemma dual'_union {s t : Set E} : dual' (s ‚à™ t) = dual' s ‚äì dual' t := by
  ext x
  constructor
  ¬∑ intro hx
    split_ands
    ¬∑ exact dual'_le_dual' (t := s ‚äî t) le_sup_left hx
    ¬∑ exact dual'_le_dual' (t := s ‚äî t) le_sup_right hx
  ¬∑ rintro ‚ü®hxs,hxt‚ü© y (hy|hy)
    ¬∑ exact hxs y hy
    ¬∑ exact hxt y hy

lemma span_dual_eq {s : Set E} :
    (span ‚Ñù s).dual = dual' s := by
  apply le_antisymm
  ¬∑ apply innerDualCone_le_innerDualCone
    exact subset_span
  ¬∑ intro x hx
    rw [mem_dual]
    apply Submodule.span_induction
    ¬∑ intro y hy
      exact hx y hy
    ¬∑ simp only [inner_zero_left, le_refl]
    ¬∑ intro y z _ _ hxy hyz
      rw [inner_add_left]
      exact add_nonneg hxy hyz
    ¬∑ intro t y _ hxy 
      erw [inner_smul_real_left]
      exact mul_nonneg t.prop hxy

end PointedCone

noncomputable section DualPolyhedral
open PointedCone

variable (S : Finset E) (w : E)

private abbrev inner_nonneg_set : Finset E := {s ‚àà S | 0 ‚â§ ‚ü™s,w‚ü´_‚Ñù }
private abbrev inner_neg_set : Finset E := {s ‚àà S | ‚ü™s,w‚ü´_‚Ñù < 0}

lemma inner_w_nonneg_of_mem_span (x : E) (hx : x ‚àà span ‚Ñù (inner_nonneg_set S w)) :
    ‚ü™x,w‚ü´_‚Ñù ‚â• 0 := by
  revert x
  apply Submodule.span_induction
  ¬∑ intro x hx
    simp only [Finset.coe_filter, Set.mem_setOf_eq] at hx
    exact hx.2
  ¬∑ simp only [inner_zero_left, ge_iff_le, le_refl]
  ¬∑ intro x y hx hy hxw hyw
    rw [inner_add_left]
    exact add_nonneg hxw hyw
  ¬∑ intro ‚ü®t,ht‚ü© x hx hxw
    rw [Nonneg.mk_smul, real_inner_smul_left]
    exact mul_nonneg ht hxw

private abbrev generating_set := inner_nonneg_set S w ‚à™
  Finset.image (fun (x,y) => ‚ü™x,w‚ü´_‚Ñù ‚Ä¢ y - ‚ü™y,w‚ü´_‚Ñù ‚Ä¢ x)
               (Finset.product (inner_nonneg_set S w) (inner_neg_set S w))

private lemma generating_set_le_span : (generating_set S w : Set E) ‚â§ span ‚Ñù (S : Set E) := by
  intro x hx
  rw [Finset.mem_coe, Finset.mem_union] at hx
  rcases hx with (hx | hx)
  ¬∑ apply Submodule.subset_span
    exact Finset.mem_of_mem_filter x hx
  ¬∑ simp only [Finset.product_eq_sprod, Finset.mem_image, Finset.mem_product, Finset.mem_filter,
    Prod.exists] at hx
    obtain ‚ü®a,b,‚ü®‚ü®haS,haw‚ü©,‚ü®hbS,hbw‚ü©‚ü©,rfl‚ü© := hx
    let t‚ÇÅ : {t : ‚Ñù // 0 ‚â§ t} := ‚ü®‚ü™a,w‚ü´_‚Ñù, haw‚ü©
    let t‚ÇÇ : {t : ‚Ñù // 0 ‚â§ t} := ‚ü®-‚ü™b,w‚ü´_‚Ñù, by rw [neg_nonneg]; exact le_of_lt hbw‚ü©
    rw [SetLike.mem_coe, sub_eq_add_neg, ‚Üêneg_smul]
    change t‚ÇÅ ‚Ä¢ b + t‚ÇÇ ‚Ä¢ a ‚àà _
    apply Submodule.add_mem
    ¬∑ apply Submodule.smul_mem
      apply Submodule.subset_span
      exact hbS
    ¬∑ apply Submodule.smul_mem
      apply Submodule.subset_span
      exact haS

private lemma generating_set_le_dual' : (generating_set S w : Set E) ‚â§ dual' {w} := by
  intro x hx
  simp only [Finset.coe_union, Finset.coe_filter, Finset.product_eq_sprod, Finset.coe_image,
    Finset.coe_product, Set.mem_union, Set.mem_setOf_eq, Set.mem_image, Set.mem_prod,
    Prod.exists] at hx
  rcases hx with (‚ü®hxS, hxw‚ü© | ‚ü®a,b,‚ü®‚ü®haS,haw‚ü©,‚ü®hbS,hbw‚ü©‚ü©,rfl‚ü©)
  ¬∑ simp only [SetLike.mem_coe, mem_dual', Set.mem_singleton_iff, forall_eq]
    rw [real_inner_comm]
    exact hxw
  ¬∑ simp only [SetLike.mem_coe, mem_dual', Set.mem_singleton_iff, forall_eq]
    rw [inner_sub_right, real_inner_smul_right, real_inner_smul_right, mul_comm,
        real_inner_comm]
    nth_rw 2 [real_inner_comm]
    rw [sub_self]

private lemma mem_span_generating_set {x y : E} (hx : x ‚àà span ‚Ñù (inner_nonneg_set S w))
  (hy : y ‚àà span ‚Ñù (inner_neg_set S w)) :
    ‚ü™x,w‚ü´_‚Ñù ‚Ä¢ y - ‚ü™y,w‚ü´_‚Ñù ‚Ä¢ x ‚àà span ‚Ñù (generating_set S w) := by
  revert x y
  apply Submodule.span_induction‚ÇÇ
  ¬∑ intro x y hx hy
    apply Submodule.subset_span
    apply Finset.mem_union_right
    rw [Finset.mem_image]
    refine ‚ü®(x,y),?_,rfl‚ü© 
    rw [Finset.product_eq_sprod, Finset.mem_product]
    exact ‚ü®hx,hy‚ü© 
  ¬∑ intro x hx
    simp only [Finset.coe_union, Finset.coe_filter, Finset.product_eq_sprod, Finset.coe_image,
      Finset.coe_product, inner_zero_left, zero_smul, smul_zero, sub_self, Submodule.zero_mem]
  ¬∑ intro x hx
    simp only [Finset.coe_union, Finset.coe_filter, Finset.product_eq_sprod, Finset.coe_image,
      Finset.coe_product, smul_zero, inner_zero_left, zero_smul, sub_self, Submodule.zero_mem]
  ¬∑ intro x y z hx hy hz hxz hyz
    convert Submodule.add_mem _ hxz hyz using 1
    rw [inner_add_left, smul_add, add_smul]
    abel
  ¬∑ intro x y z hx hy hz hxy hxz
    convert Submodule.add_mem _ hxy hxz using 1
    rw [inner_add_left, smul_add, add_smul]
    abel
  ¬∑ intro ‚ü®t,ht‚ü© x y hx hy hxy
    convert Submodule.smul_mem _ ‚ü®t,ht‚ü© hxy using 1
    rw [Nonneg.mk_smul, real_inner_smul_left, Nonneg.mk_smul, smul_sub, smul_smul,
      smul_smul, smul_smul]
    nth_rw 2 [mul_comm]
  ¬∑ intro ‚ü®t,ht‚ü© x y hx hy hxy
    convert Submodule.smul_mem _ ‚ü®t,ht‚ü© hxy using 1
    rw [Nonneg.mk_smul, real_inner_smul_left, Nonneg.mk_smul, smul_sub, smul_smul,
      smul_smul, smul_smul, mul_comm]

private lemma span_inf_dual'_eq_span_generating_set :
    span ‚Ñù S ‚äì dual' {w} = span ‚Ñù (generating_set S w) := by
  apply le_antisymm
  ¬∑ intro x ‚ü®hx,hxw‚ü© 
    simp only [SetLike.mem_coe, mem_dual', Set.mem_singleton_iff, forall_eq] at hxw
    revert x
    apply Submodule.span_induction
    ¬∑ intro x hx hxw
      apply Submodule.subset_span
      apply Finset.mem_union_left
      rw [Finset.mem_filter, real_inner_comm]
      exact ‚ü®hx,hxw‚ü© 
    ¬∑ intro _
      exact Submodule.zero_mem _
    ¬∑ intro x y hx hy hxw hyw hxyw
      rw [inner_add_right] at hxyw
      wlog H : 0 ‚â§ ‚ü™w,x‚ü´_‚Ñù generalizing x y
      ¬∑ rw [add_comm] at hxyw ‚ä¢
        apply this y x hy hx hyw hxw hxyw
        linarith
      ¬∑ apply Submodule.add_mem _ (hxw H)
        sorry
    ¬∑ intro ‚ü®t,ht‚ü© x hxS hwx hwtx
      by_cases htzero : t = 0
      ¬∑ rw [Nonneg.mk_smul, htzero, zero_smul]
        exact Submodule.zero_mem _
      ¬∑ have tpos : t > 0 := lt_of_le_of_ne ht (Ne.symm htzero)
        apply Submodule.smul_mem
        apply hwx
        rw [Nonneg.mk_smul, real_inner_smul_right] at hwtx
        exact nonneg_of_mul_nonneg_right hwtx tpos
  ¬∑ apply le_inf
    ¬∑ exact Submodule.span_le.mpr (generating_set_le_span S w)
    ¬∑ exact Submodule.span_le.mpr (generating_set_le_dual' S w)

lemma IsPolyhedral.inf_dual'_singleton {c : PointedCone ‚Ñù E} (hc : c.IsPolyhedral) (w : E) :
    IsPolyhedral (c ‚äì dual' {w}) := by
  obtain ‚ü®S, rfl‚ü© := hc
  use (generating_set S w)
  exact span_inf_dual'_eq_span_generating_set S w

theorem IsPolyhedral.dual [FiniteDimensional ‚Ñù E] {c : PointedCone ‚Ñù E} (hc : c.IsPolyhedral) :
    c.dual.IsPolyhedral := by
  obtain ‚ü®S,rfl‚ü© := hc
  rw [span_dual_eq]
  revert S
  apply Finset.induction
  ¬∑ convert IsPolyhedral.top (ùïú := ‚Ñù) (E := E)
    apply toConvexCone_injective
    rw [toConvexCone_dual', Finset.coe_empty, innerDualCone_empty]
    rfl
  ¬∑ intro x S hx hS
    rw [Finset.insert_eq, Finset.coe_union, dual'_union, inf_comm, Finset.coe_singleton]
    apply IsPolyhedral.inf_dual'_singleton
    exact hS

end DualPolyhedral

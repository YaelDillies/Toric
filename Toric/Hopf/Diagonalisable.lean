/-
Copyright (c) 2025 Sophie Morel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sophie Morel
-/
import Toric.Hopf.MonoidAlgebra
import Toric.Mathlib.Algebra.Module.Equiv.Defs
import Toric.Mathlib.RingTheory.Bialgebra.Basic

/-!
# Diagonalizable bialgebras

We define diagonalizable bialgebras (over a commutative ring `R`) as those that are
isomorphic to a group algebra over `R`.

We then prove that any diagonalizable bialgebra is spanned by its group-like elements.

If the base ring is a field, we prove the converse: any bialgebra spanned by its group-like
elements is diagonalizable. The idea is that, if `A` is a bialgebra over `R` and
`G` is its set of group-like elements, then `G` is a group (for the multiplication of `A`),
so we get a morphism of algebras from `R[G]` to `A`, which is actually a morphism of bialgebras.
This morphism is surjective by assumption, and, if `R` is a field, it is also injective
because group-like elements are linearly independent.

Note that the last result is false in general.
-/

open Function MonoidAlgebra

universe u

namespace Bialgebra
section CommRing
variable {R G : Type*} {A : Type u} [CommRing R] [Semiring A] [Bialgebra R A]

variable (R A) in
/-- A bialgebra is called diagonalisable if it is isomorphic to a group algebra. -/
@[mk_iff]
class IsDiagonalisable : Prop where
  existsIso : ∃ (G : Type u) (_ : Group G), Nonempty (A ≃ₐc[R] MonoidAlgebra R G)

/-- A group algebra is diagonalisable. -/
instance [Group G] : IsDiagonalisable R (MonoidAlgebra R G) :=
  ⟨⟨ULift G, _, ⟨domCongrBialgHom R R MulEquiv.ulift.symm⟩⟩⟩

instance [Subsingleton R] : IsDiagonalisable R A := by
  have : Subsingleton A := (algebraMap R A).codomain_trivial
  have := BialgEquiv.ofBijective (Bialgebra.counitBialgHom R A)
    (⟨Function.injective_of_subsingleton _, Function.surjective_to_subsingleton _⟩)
  exact ⟨_, _, ⟨this.trans (bialgEquivOfSubsingleton PUnit).symm⟩⟩

lemma IsDiagonalisable.ofBialgEquiv {B : Type*} [Semiring B] [Bialgebra R B]
    [hA : IsDiagonalisable R A] (e : A ≃ₐc[R] B) : IsDiagonalisable R B := by
  nontriviality R
  obtain ⟨G, _, ⟨e'⟩⟩ := hA
  replace e := e'.symm.trans e
  have eG := Equiv.ofInjective _ (e.injective.comp of_injective)
  letI := eG.symm.group
  exact ⟨_, _, ⟨((domCongrBialgHom R R eG.symm.mulEquiv).trans e).symm⟩⟩

instance : IsDiagonalisable R R := .ofBialgEquiv <| bialgEquivOfSubsingleton Unit

/-- A diagonalisable bialgebra is generated by its group-like elements. -/
lemma span_isGroupLikeElem_eq_top_of_isDiagonalisable :
    IsDiagonalisable R A → Submodule.span R {a : A | IsGroupLikeElem R a} = ⊤ := by
  rintro ⟨⟨G, _, ⟨e⟩⟩⟩
  rw [← Submodule.comap_top (e : A ≃ₗ[R] MonoidAlgebra R G).toLinearMap,
    ← span_isGroupLikeElem (R := R), Submodule.comap_equiv_eq_map_symm, Submodule.map_span]
  simp [LinearEquiv.image_eq_preimage]

end CommRing

section Field
variable {K : Type*} {A : Type u} [Field K] [Ring A] [Bialgebra K A]

open MonoidAlgebra

/-- A bialgebra over a field that is generated by its group-like elements is isomorphic
to the group algebra on its group-like elements. -/
lemma liftGroupLikeBialgHom_bijective_of_span_isGroupLikeElem_eq_top
    (h : Submodule.span K {a : A | IsGroupLikeElem K a} = ⊤) :
    Bijective (liftGroupLikeBialgHom K A) := by
  have : Nontrivial A := Bialgebra.nontrivial K
  set e : GroupLike K A ≃ {a : A | IsGroupLikeElem K a} := {
    toFun g := ⟨g.1, g.2⟩
    invFun a := ⟨a.2.isUnit.unit, a.2⟩
    left_inv g := by simp
    right_inv a := by simp
  }
  refine ⟨?_, fun b ↦ ?_⟩
  · rw [RingHom.injective_iff_ker_eq_bot, RingHom.ker_eq_bot_iff_eq_zero]
    intro x hx
    refine (linearIndependent_equiv e).mpr linearIndepOn_isGroupLikeElem.linearIndependent ?_
    simpa [Algebra.ofId, e, Algebra.smul_def, Finsupp.linearCombination_apply] using hx
  · obtain ⟨x, hx⟩ := (Finsupp.mem_span_iff_linearCombination K {a | IsGroupLikeElem K a} b).mp
      (by rw [h]; exact Submodule.mem_top)
    use x.equivMapDomain e.symm
    simpa [liftNC, Finsupp.liftAddHom, Algebra.ofId, Algebra.smul_def, e,
      Finsupp.linearCombination_apply] using hx

/-- A bialgebra over a field that is generated by its group-like elements is diagonalisable.

This is also true over a commutative ring, but with a more complicated proof. -/
lemma IsDiagonalisable.of_span_isGroupLikeElem_eq_top
    (h : Submodule.span K {a : A | IsGroupLikeElem K a} = ⊤) : IsDiagonalisable K A where
  existsIso := ⟨GroupLike K A, inferInstance, Nonempty.intro ((BialgEquiv.ofBijective _
    (liftGroupLikeBialgHom_bijective_of_span_isGroupLikeElem_eq_top h)).symm)⟩

/-- A bialgebra over a field is diagonalizable if and only if it is generated by its group-like
elements.

This is also true over a commutative ring, but with a more complicated proof. -/
lemma isDiagonalisable_iff_span_isGroupLikeElem_eq_top :
    IsDiagonalisable K A ↔ Submodule.span K {a : A | IsGroupLikeElem K a} = ⊤ :=
  ⟨span_isGroupLikeElem_eq_top_of_isDiagonalisable, .of_span_isGroupLikeElem_eq_top⟩

end Field
end Bialgebra
